<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Boss_Orro_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>spr_Boss_Orro_Idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

animation = 1/8;

image_speed = animation;

// Stats

enterpound = 0;
roar = 0;

deathmark = 1;

walksp = 2;
jmpspd = 6;

dirMAX = 0;  // Used to remember dir after Crystal Hold
dir = 0;
grav = .4;
hsp = 0;
vsp = 0;

jumpspeed = 10;
stop = 0;

can_run = 1;
can_melee = 1;

idle_count = 0;
walk_count = 0;


cb_stunned = 1;

enemy_hp = .5;//40

enemy_dmg = 4;

// Initial State

enemy_state = enemy_states.enemy_enterroom;

// Can be Crystal Hold

can_hold = 1;

crystal_held = 0;

ch_count = 0;

// Track Oenn

O_x = obj_Oenn_Body.x
O_xplus = 0;
O_xminus = 0;










</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Are you a Shield

enemy_shield = 1;

enemy_soft = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can be Slashed

cb_slashed = 0;

cb_slashed_combo_1 = 0;

cb_slashed_combo_2 = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash White

flash = shader_get_uniform(sh_flash, "f_colour");
flash_timer = 0;
flash_duration = room_speed * 0.25; // 0.25 seconds
flash_r = 1;  // Colour of your flash. Values on 0-1 range.
flash_g = 1;  // All colours set on 1 would make it white
flash_b = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CanShoot 
{
  canShoot = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot and Wall

WeakSpot = instance_create(x-8,y+20,obj_Orro_WS);
/*
Wall = instance_create(x,y,obj_FattyWall);
Wall.host = id;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back Hit Box

BackHB = instance_create(x+32,y,obj_Atlas_GroundPound);

BackHB.enemy_dmg = 4;

BackHB.image_xscale = .75;

BackHB.alarm[0] = -4;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Title Alpha

alarm[1] = room_speed*1.75;

alarm[2] = room_speed*3.75;

on = 0;

alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alpha off

on = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alpha on

on = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Melee

can_melee = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot Flips

if instance_exists(WeakSpot)
{
    if image_xscale = 1
    {
        WeakSpot.x = x - 12;
        WeakSpot.y = y+20;
        if enemy_state = enemy_states.enemy_stunned
        {  
            WeakSpot.x = x - 36;
            WeakSpot.y = y+40;
        }
    }
    else
    {
        WeakSpot.x = x + 12;
        WeakSpot.y = y+20;
        if enemy_state = enemy_states.enemy_stunned
        {  
            WeakSpot.x = x + 36;
            WeakSpot.y = y+40;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back Hit Box Flip

if instance_exists(BackHB)
{
    if image_xscale = 1
    {
        BackHB.x = x+32;
        BackHB.y = y+16;
        if enemy_state = enemy_states.enemy_stunned
        {  
            BackHB.x = x+16;
            BackHB.y = y+32;
        }
    }
    else
    {
        BackHB.x = x-32;
        BackHB.y = y+16;
        if enemy_state = enemy_states.enemy_stunned
        {  
            BackHB.x = x-16;
            BackHB.y = y+32;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    
    //// Idle
    case enemy_states.enemy_idle: 
    sprite_index = spr_Boss_Orro_Idle;
    hsp = 0;
    walk_count = 0;
    
    if idle_count = 2
    {
        if distance_to_object(obj_Oenn_Body) &lt; 128
        and ((y - obj_Oenn_Body.y) &lt; 8)
        {
        dirMAX = walksp;  // Used to remember dir after Crystal Hold
        dir = walksp;
        enemy_state = enemy_states.enemy_walking;
        }
        else
        {
            if random(100) &lt; 80
            {
                 dirMAX = jmpspd;  // Used to remember dir after Crystal Hold
                 dir = jmpspd;
                 enemy_state = enemy_states.enemy_jumping;
            }
            else
            {
                dirMAX = walksp;  // Used to remember dir after Crystal Hold
                dir = walksp;
                enemy_state = enemy_states.enemy_walking;
            }
        }
    } 
    
    // Strike
    if place_meeting(x,y+1,par_wall) and distance_to_object(obj_Oenn_Body) &lt; 48
    and can_melee = 1
    {
        if y+32 &lt; obj_Oenn_Body.y//((y - obj_Oenn_Body.y) &lt; 0)
        {
            image_index = 0;
            enemy_state = enemy_states.enemy_melee;
        }
        // Jumping
        else
        {
            image_index = 0;
            enemy_state = enemy_states.enemy_jumping;
        }
    }
    
    break;
    
    //// Walk
    case enemy_states.enemy_walking: 
    sprite_index = spr_Boss_Orro_Walk;
    hsp = dir/global.slowmo;
    can_melee = 1;
    idle_count = 0;
    
    if walk_count = 3
    {   
        image_index = 0;
        enemy_state = enemy_states.enemy_idle;
    }
    
    // Strike
    if place_meeting(x,y+1,par_wall) and distance_to_object(obj_Oenn_Body) &lt; 32
    and ((y - obj_Oenn_Body.y) &lt; 16) and can_melee = 1
    {
        image_index = 0;
        enemy_state = enemy_states.enemy_melee;
    }
    
    break;
    
    // Melee
    case enemy_states.enemy_melee: 
    sprite_index = spr_Boss_Orro_Punch;
    hsp = 0;
    walk_count = 0;
    idle_count = 0;
    if instance_exists(obj_Oenn_Body) 
    {
        if image_index &gt;= 3 and image_index &lt;= 4 and image_xscale = 1
        {
            audio_play_sound(snd_Orro_Punch,10,0);
            instance_create(x-64,y+64,obj_Orro_Punch);
            can_melee = 0;
            alarm[0] = room_speed * .5;
        }
        if image_index &gt;= 3 and image_index &lt;= 4 and image_xscale = -1
        {
            audio_play_sound(snd_Orro_Punch,10,0);
            instance_create(x+64,y+64,obj_Orro_Punch);
            can_melee = 0;
            alarm[0] = room_speed * .5;
        }
    }
    
    break;
    
    //// Jumping
    
    //Crouch
    case enemy_states.enemy_jumping: 
    sprite_index = spr_Boss_Orro_Jump1;
    hsp = 0;
    O_x = obj_Oenn_Body.x;
    O_xplus = O_x+6;
    O_xminus = O_x-6;
    break;
    
    //Jumping
    case enemy_states.enemy_up: 
    sprite_index = spr_Boss_Orro_Jump1_5;
    if stop = 0
    {
        hsp = (dir/global.slowmo)*2;
    }
    else
    {
        hsp = 0;
    }
    
    if vsp &gt;= 0
    {
         enemy_state = enemy_states.enemy_down;
    }
    
    if floor(x) &lt; O_xplus and floor(x) &gt; O_xminus
    {
         stop = 1;
         hsp = 0;
         enemy_state = enemy_states.enemy_down;
    }
    
    break;
    
    //Curl in the Air
    case enemy_states.enemy_down: 
    sprite_index = spr_Boss_Orro_Jump2;
    hsp = 0;
    grav = .4;
    
    if place_meeting(x,y+1,par_wall)
    {
        if image_xscale = 1
        {
            with instance_create(x-64,y+96,obj_Orro_Punch)
            {
                image_xscale = 2.25;
                image_yscale = 2;
            }
        }
        if image_xscale = -1
        {
            with instance_create(x+64,y+96,obj_Orro_Punch)
            {
                image_xscale = 2.25;
                image_yscale = 2;
            }
        }
        
        audio_play_sound(snd_Crystal_Detonate_Explosion,10,0);
        enemy_state = enemy_states.enemy_stunned;
    }
    
    if image_index = 1
    {
        image_speed = 0;
    }
        
    break;
    
    //Ground Pound
    case enemy_states.enemy_stunned: 
    sprite_index = spr_Boss_Orro_Jump3;
    hsp = 0;
    grav = .4;
    walk_count = 0;
    stop = 0;
    image_speed = animation/global.slowmo;
    global.shake = 20;
    
    break;
    
    ////////////////////////////////////////  ENTER ROOM
    case enemy_states.enemy_enterroom: 
    
    door_closed = instance_nearest(x,y,obj_Locking_Door);
    
    // Dont Fall Until Door Closes
    if room = room_IntroStage_2 and door_closed.closed = 1
    {
        if !place_meeting(x,y+1,par_wall)
        {
            sprite_index = spr_Boss_Orro_FallEnter;
        }
        if place_meeting(x,y+1,par_wall) and roar = 0
        {
           sprite_index = spr_Boss_Orro_FallEnter1;
        }
        
    grav = .4;
    }
    else
    {
        vsp = 0;
        grav = 0;
    }
    
    // Fall To Ground Sound
    if place_meeting(x,y+1,par_wall) and enterpound = 0
    {
        global.shake = 30;
        audio_play_sound(snd_Crystal_Detonate_Explosion,10,0);
        enterpound = 1;
    }
        
    // Roar Sound and Shake
    if roar = 1
    {
        if image_index = 2
        {
            audio_play_sound(snd_Atlas_Death,10,0);
        }
        sprite_index = spr_Boss_Orro_Roar;
    }
    
    if sprite_index = spr_Boss_Orro_Roar 
    and image_index &gt; 2 and image_index &lt; 6
    {
        global.shake = 20;
    }
        
    image_speed = animation/global.slowmo;
    
    
    break;
    
    //// Death
    case enemy_states.enemy_death:
    cb_slashed = 0; 
    if sprite_index != spr_Boss_Orro_Death
    {
    image_index = 0
    sprite_index = spr_Boss_Orro_Death;
    }
    if !place_meeting(x,y+1,par_wall) //and image_index = 1
    {
        image_index = 1;
    }   
    
    if image_index = 2 and place_meeting(x,y+1,par_wall)
    {
        audio_play_sound(snd_Crystal_Detonate_Explosion,10,0);
    }
    
    hsp = 0; 
    
    if image_index = 0
    {
        global.backgroundmusic = 0;
        obj_MusicBox.backgroundstop = 1;
        //obj_HUD.off = 1;
        audio_stop_sound(snd_Orro_Fight);
        audio_play_sound(snd_Atlas_Death,10,0);
        global.hitfreeze = 5;
    }
    
    break;
    //default: break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 10) vsp += grav;


//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),ceil(y+vsp),par_wall))
{
    while(!place_meeting((x),ceil(y+sign(vsp)),par_wall))
    {
        y += ceil(sign(vsp));
    }
    vsp = 0;
    
}

y += ceil(vsp);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if enemy_hp &lt;= 0
{
    depth = 0; 
    enemy_state = enemy_states.enemy_death;
    with WeakSpot
    {
        instance_destroy();
    }
    with BackHB
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Flip and Direction

// Flip
if enemy_state != enemy_states.enemy_down
and enemy_state != enemy_states.enemy_up
and enemy_state != enemy_states.enemy_stunned
and enemy_state != enemy_states.enemy_death
and enemy_state != enemy_states.enemy_melee
{
    if x &lt; obj_Oenn_Body.x 
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}

// Direction

if enemy_state != enemy_states.enemy_down
and enemy_state != enemy_states.enemy_up
and enemy_state != enemy_states.enemy_stunned
{
    if x &lt; obj_Oenn_Body.x
    {
        dir = abs(dir);
    }
    else
    {
        if dir &gt; 0
        {
        dir = -(dir);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Speed

if global.freeze_all = 0
{
    image_speed = animation/global.slowmo;
}
/*else 
{   
    image_speed = animation;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation Speed Up Melee
if global.freeze_all = 0
{
    if enemy_state = enemy_states.enemy_melee
    {
        animation = 1/4;
    }
    else 
    {
        animation = 1/8;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Amped

if enemy_hp &lt;= 25
{
    walksp = 3;
    jmpspd = 7;
    image_blend = merge_color(c_maroon,c_white,.75);
}

if enemy_hp &lt;= 10
{
    image_blend = merge_color(c_maroon,c_white,.5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Title Alpha

if on = 1
{
    alpha += .0095;
}

if on = 2
{
    alpha -= .0095;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Floor
if y &gt; other. y
{
    y += -1;
}
else
{
    y -= 1;
}

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transitions

// Idle to Walking 
if  sprite_index = spr_Boss_Orro_Idle
{
    idle_count += 1;
}

// Walking to Idle 
if  sprite_index = spr_Boss_Orro_Walk
{
    walk_count += 1;
}

/// Punch to Idle

if  sprite_index = spr_Boss_Orro_Punch
//and distance_to_object(obj_Oenn_Body) &gt; 48

{
    enemy_state = enemy_states.enemy_idle;
}/*
if  sprite_index = spr_Boss_Orro_Punch
and distance_to_object(obj_Oenn_Body) &lt; 32
and y+96 &lt; obj_Oenn_Body.y//) &lt; 16)
{
    enemy_state = enemy_states.enemy_melee;
}*/

/// Jump Crouch

if  sprite_index = spr_Boss_Orro_Jump1
{
    audio_play_sound(snd_Orro_Jump,10,0);
    vsp = (-jumpspeed)/global.slowmo; // jumps up
    enemy_state = enemy_states.enemy_up;
}

// Curl in the Air

if  sprite_index = spr_Boss_Orro_Jump2
{
    image_index = 1;
}

// Ground Pound

if  sprite_index = spr_Boss_Orro_Jump3
{
    enemy_state = enemy_states.enemy_idle;
}

//////////////////// Entering Room

if sprite_index = spr_Boss_Orro_FallEnter and place_meeting(x,y+1,par_wall)
{
    sprite_index = spr_Boss_Orro_FallEnter1
}

if sprite_index = spr_Boss_Orro_FallEnter1
{
    roar = 1;
    image_index = 0;
}

if sprite_index = spr_Boss_Orro_Roar
{
    enemy_state = enemy_states.enemy_idle;
    idle_count = 2;
    obj_Oenn_Body.lock = 0;
    obj_Oenn_Body.can_move = 1;
}

// Death

if sprite_index = spr_Boss_Orro_Death
{ 
/*
    instance_create(x,y,obj_Enemy_DeathSmoke);
    audio_play_sound(snd_Enemy_Death,10,0);
    instance_create(x,y,obj_Shard_Large);
    instance_create(x,y,obj_Shard_Large);
    instance_create(x,y,obj_Health_Small);
    instance_destroy();
*/

image_index = 15;
image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Orro Title

draw_sprite_ext(spr_Orro_Title,0,display_get_gui_width()/2,display_get_gui_height()/2,2,2,0,c_white,alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
/*
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
