<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy_GruntShield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

animation = 1/8;

image_speed = animation;

// Stats

dirMAX = 4;  // Used to remember dir after Crystal Hold
dir = 4;
grav = .4;
hsp = 2;
vsp = 0;
jumpspeed = 6;

up_counter = 0;

can_run = 1;
can_throw = 1;
vision = 96;

cb_stunned = 1;

enemy_hp = 10;

enemy_dmg = 4;

change = 0;

// Initial State

enemy_state = enemy_states.enemy_idle;

enemy_shield = 1;

// Won't Go off Platform Edges

edgestop = 1;








</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throwing Variables
{
  canShoot = true;
  global.grav = 0.2;  //set the gravity!
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shield

Shield = instance_create(x,y,obj_Enemy_ShieldGrunt_Shield);

Shield.host = id;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shield Flip

if instance_exists(Shield)
{
    if image_xscale &gt; 0 
    {
        Shield.x = x - 16;
        Shield.y = y - 16;
    }
    else
    {
        Shield.x = x + 16;
        Shield.y = y - 16;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    
    //// Idle
    case enemy_states.enemy_idle: 
    sprite_index = spr_Enemy_GruntShield;
    hsp = 0;
    animation = 1/4;
    if distance_to_object(obj_Oenn_Body) &lt; 160 and canShoot = true
    and !collision_line(x,y-16,obj_Oenn_Body.x,obj_Oenn_Body.y,obj_wall,false,true)
    and !collision_line(x,y-16,obj_Oenn_Body.x,obj_Oenn_Body.y,obj_floor,false,true)
    {
        image_index = 0;
        enemy_state = enemy_states.enemy_shooting;
    }
    
    break;
    
     //// Hit 1
    case enemy_states.enemy_hit1: 
    sprite_index = spr_BTA_CinderShield_Flinch;
    
    hsp = 0;
    
    break;
    
    // Throw Fire
    
    case enemy_states.enemy_shooting: 
    sprite_index = spr_Enemy_GruntShield_Throw;
    hsp = 0;
    // Left
    if image_index &gt;= 8
    and image_xscale &gt; 0
    and canShoot = true
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x-8,y-42,obj_Enemy_GruntShield_Fireball);
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x-8);
        dY = obj_Oenn_Body.y-(y-42);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        canShoot = false;
        alarm[0] = room_speed*2.5;
      }
    }
    }
    // Right
    if image_index &gt;= 8 
    and image_xscale &lt; 0
    and canShoot = true
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x+8,y-42,obj_Enemy_GruntShield_Fireball);
        iii.image_xscale = -1;
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x+8);
        dY = obj_Oenn_Body.y-(y-42);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        canShoot = false;
        alarm[0] = room_speed*2.5;
      }
    }
    }
    break;
    
    //// Stunned
    case enemy_states.enemy_stunned: 
    sprite_index = spr_Enemy_GruntShield_Stunned;
    hsp = 0;
    
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Flip

if enemy_state != enemy_states.enemy_down
and enemy_state != enemy_states.enemy_up
and enemy_state != enemy_states.enemy_stunned
and enemy_state != enemy_states.enemy_death
{
    if x &lt; obj_Oenn_Body.x
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 5) vsp += grav;


//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),round(y+vsp),par_wall))
{
    while(!place_meeting((x),(y+sign(vsp)),par_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 
    and ((!position_meeting(x+((sprite_width/8)*sign(-dir)), y+(sprite_height/4)+32,par_wall))
    and (!position_meeting(x+((sprite_width/8)*sign(-dir)), y+(sprite_height/4)+16,par_wall)))
    //and COV.on = 0  // COV will still work on edge
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*.5;
    }
     if (edgestop = 1) and hsp &lt; 0 
     and ((!position_meeting(x+((sprite_width/8)*sign(dir)), y+(sprite_height/4)+32,par_wall)) 
     and (!position_meeting(x+((sprite_width/8)*sign(dir)), y+(sprite_height/4)+16,par_wall))) 
     //and COV.on = 0
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*.5;
    }
}


//Vertical Collision Platforms
/*
if (place_meeting((x),round(y+vsp),obj_Ghost_Platform))
{
    while(!place_meeting((x),(y+sign(vsp)),obj_Ghost_Platform))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*2;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*2;
    }
}
*/
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change

if change = 1
{
    instance_change(obj_Enemy_BTA_Grunt,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition to States

// Back to Idles
if sprite_index = spr_BTA_CinderShield_Flinch
{
    enemy_state = enemy_states.enemy_idle;
}

if sprite_index = spr_Enemy_GruntShield_Throw
{
    enemy_state = enemy_states.enemy_idle;
}

if sprite_index = spr_Enemy_GruntShield_Stunned
{
    change = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,48</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
