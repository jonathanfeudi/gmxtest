<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_BTA_Fatty_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>spr_BTA_Fatty_Idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

animation = 1/8;

image_speed = animation;

// Stats

dirMAX = 0;  // Used to remember dir after Crystal Hold
dir = 0;
grav = .4;
hsp = 2;
vsp = 0;

can_run = 1;
can_melee = 1;


cb_stunned = 1;

enemy_hp = 25;//25

enemy_dmg = 4;

deathmark = 1;

knockback = 12;

origin_offcenter = 0;

// Initial State

enemy_state = enemy_states.enemy_idle;

// Can be Crystal Hold

can_hold = 1;

crystal_held = 0;

ch_count = 0;

// Remember Death in Room

rememberdeath = 0;











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Are you a Shield

enemy_shield = 1;

enemy_soft = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can be Slashed

cb_slashed = 0;

cb_slashed_combo_1 = 0;

cb_slashed_combo_2 = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash White

flash = shader_get_uniform(sh_flash, "f_colour");
flash_timer = 0;
flash_duration = room_speed * 0.25; // 0.25 seconds
flash_r = 1;  // Colour of your flash. Values on 0-1 range.
flash_g = 1;  // All colours set on 1 would make it white
flash_b = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CanShoot
{
  canShoot = true;
  global.grav = 0.2;  //set the gravity!
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit NOOOOO

//event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot and Wall

WeakSpot = instance_create(x-8,y-8,obj_BTAFatty_WeakSpot);

Wall = instance_create(x,y,obj_FattyWall);
Wall.host = id;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Wall and Weak Spot if Death Remembered

with WeakSpot
{
    instance_destroy();
}

with Wall
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot Flips

if instance_exists(WeakSpot)
{
    if image_xscale = 1
    {
        WeakSpot.x = x - 8;
        WeakSpot.y = y - 4;
    }
    else
    {
        WeakSpot.x = x + 4;
        WeakSpot.y = y - 4;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    
    //// Idle
    case enemy_states.enemy_idle: 
    sprite_index = spr_BTA_Fatty_Idle;
    hsp = 0;
    
    if distance_to_object(obj_Oenn_Body) &lt; 320
    {
        enemy_state = enemy_states.enemy_shooting;
    } 
    
    break;
    
    //// Shooting
    case enemy_states.enemy_shooting: 
    sprite_index = spr_BTA_Fatty_Burp;
    
    // Left
    if image_index = 3 //and !instance_exists(obj_Fatty_Bubble) 
    and image_xscale &gt; 0
    //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x,y-2,obj_Fatty_Bubble);
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-x;
        dY = obj_Oenn_Body.y-(y-2);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        //canShoot = false;
        alarm[0] = room_speed*.1;
      }
    }
    }
    // Right
    if image_index = 3 //and !instance_exists(obj_Fatty_Bubble) 
    and image_xscale &lt; 0
   //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x,y-2,obj_Fatty_Bubble);
        iii.image_xscale = -1;
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x);
        dY = obj_Oenn_Body.y-(y-2);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        //canShoot = false;
        alarm[0] = room_speed*.1;
      }
    }
    }
    
    if distance_to_object(obj_Oenn_Body) &gt; 320
    {
        enemy_state = enemy_states.enemy_idle;
    } 
    
    break;
    
    //// Stunned
    case enemy_states.enemy_stunned:
    hsp = 0; 
    sprite_index = spr_BTA_Fatty_HitBurp;
    
    // Left
    if image_index = 3// and !instance_exists(obj_Fatty_Bubble) 
    and image_xscale &gt; 0
    //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x,y-2,obj_Fatty_Bubble);
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-x;
        dY = obj_Oenn_Body.y-(y-2);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        //canShoot = false;
        alarm[0] = room_speed*.1;
      }
    }
    }
    // Right
    if image_index = 3 //and !instance_exists(obj_Fatty_Bubble) 
    and image_xscale &lt; 0
   //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x,y-2,obj_Fatty_Bubble);
        iii.image_xscale = -1;
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x);
        dY = obj_Oenn_Body.y-(y-2);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        //canShoot = false;
        alarm[0] = room_speed*.1;
      }
    }
    }
    
    if distance_to_object(obj_Oenn_Body) &gt; 320
    {
        enemy_state = enemy_states.enemy_idle;
    } 
    
    break;
    
    //// Damaged
    case enemy_states.enemy_damaged:
    hsp = 0; 
    sprite_index = spr_BTA_Fatty_Hit;
    
    if distance_to_object(obj_Oenn_Body) &lt; 320
    {
        enemy_state = enemy_states.enemy_stunned;
    } 
    
    break;
    
    //// Death
    case enemy_states.enemy_death:
    cb_slashed = 0; 
    if sprite_index != spr_BTA_Fatty_Death
    {
    image_index = 0
    sprite_index = spr_BTA_Fatty_Death;
    }
    hsp = 0; 
    
    if image_index = 0
    {
        audio_play_sound(snd_FattyDeath,10,0);
    }
    
    break;
    default: break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 5) vsp += grav;

/*
//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);

*/
//Vertical Collision Floor

if (place_meeting((x),round(y+vsp),par_wall))
{
    while(!place_meeting((x),(y+sign(vsp)),par_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if enemy_hp &lt;= 0
{
    depth = 0;
    enemy_state = enemy_states.enemy_death;
    with WeakSpot
    {
        instance_destroy();
    }
    with Wall
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Flip

if enemy_state != enemy_states.enemy_death
{
    if x &lt; obj_Oenn_Body.x
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Speed

image_speed = animation/global.slowmo;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remember Death in Room

if global.DeadEnemies[1] = 1
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Slash">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit

if enemy_state = enemy_states.enemy_shooting
{
    canShoot = 1;
    image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_stunned;
}
else if enemy_state != enemy_states.enemy_damaged
and enemy_state != enemy_states.enemy_stunned
and enemy_state != enemy_states.enemy_death
{
    canShoot = 1;
    image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_damaged;
}

// Bounce Oenn other way

if x &gt; obj_Oenn_Body.x
//and other.sprite_index != spr_Slash_Small_Down
{
    obj_Oenn_Body.hsp = -9;
}

if x &lt; obj_Oenn_Body.x
//and other.sprite_index != spr_Slash_Small_Down
{
    obj_Oenn_Body.hsp = 9;
}

if other.sprite_index = spr_Slash_Small_Down 
{
    obj_Oenn_Body.vsp = -12;
}



/*
if enemy_state != enemy_states.enemy_damaged
and enemy_state != enemy_states.enemy_death
{
    //image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_damaged;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Pulse">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit

if enemy_state = enemy_states.enemy_shooting
{
    canShoot = 1;
    image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_stunned;
}
else if enemy_state != enemy_states.enemy_damaged
and enemy_state != enemy_states.enemy_stunned
and enemy_state != enemy_states.enemy_death
{
    canShoot = 1;
    image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_damaged;
}
/*
{
    //image_index = 0;
    audio_play_sound(snd_Belly_Hit,10,0);
    enemy_state = enemy_states.enemy_damaged;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transitions

if  sprite_index = spr_BTA_Fatty_Idle and distance_to_object(obj_Oenn_Body) &lt; 320
{
    canShoot = 1;
    enemy_state = enemy_states.enemy_shooting;
}

if sprite_index = spr_BTA_Fatty_Hit and distance_to_object(obj_Oenn_Body) &lt; 320
{
    canShoot = 1;
    enemy_state = enemy_states.enemy_stunned;
}

/// Stunned

if sprite_index = spr_BTA_Fatty_HitBurp
{
    canShoot = 1;
    enemy_state = enemy_states.enemy_idle;
}

/// Damaged

if sprite_index = spr_BTA_Fatty_Hit
{
    canShoot = 1;
    enemy_state = enemy_states.enemy_idle;
}

// Death

if sprite_index = spr_BTA_Fatty_Death
{ 
    instance_create(x,y,obj_Enemy_DeathSmoke);
    audio_play_sound(snd_Enemy_Death,10,0);
    instance_create(x,y,obj_Shard_Small);
    if random(100) &lt; 85 then  // Chances for Health
    {
        instance_create(x,y,obj_Health_Small);
    }
    
    // Death Burn Carcass
    if image_xscale = 1
    {
        with instance_create(x,y,obj_Enemy_Gurd_DeathBurn)
        {
            image_xscale = 1;
        }
    }
    if image_xscale = -1
    {
        with instance_create(x,y,obj_Enemy_Gurd_DeathBurn)
        {
            image_xscale = -1;
        }
    }       
    
    /////////////// Remember If Dead in Room
    // Intro Stage
    if room = room_IntroStage_1 
    and rememberdeath = 1
    {
        global.DeadEnemies[1] = 1;
    }
    
    // Destroy
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,48</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
