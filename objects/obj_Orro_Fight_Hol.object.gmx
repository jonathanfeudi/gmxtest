<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Orro_Cutscene_Hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// State

state = 'enter';

// Animations

animation = 1/8;

image_speed = animation;

// Stats

enterpound = 0;
roar = 0;

grav = .4;
hsp = 0;
vsp = 0;

// Move

move = 3;

// Start Next Time Line

timeline = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States

//  ENTER ROOM
switch (state) {    
    case 'enter': 
    
    // Dont Fall Until Door Closes
    if room = room_IntroStage_3 
    {
        if !place_meeting(x,y+1,par_wall)
        {
            sprite_index = spr_Boss_Orro_FallEnter;
        }
        if place_meeting(x,y+1,par_wall) and roar = 0
        {
           sprite_index = spr_Boss_Orro_FallEnter1;
        }
        
    grav = .4;
    }
    else
    {
        vsp = 0;
        grav = 0;
    }
    
    // Fall To Ground Sound
    if place_meeting(x,y+1,par_wall) and enterpound = 0
    {
        global.shake = 30;
        audio_play_sound(snd_Crystal_Detonate_Explosion,10,0);
        enterpound = 1;
    }
        
    // Roar Sound and Shake
    if roar = 1
    {
        if image_index = 2
        {
            audio_play_sound(snd_Atlas_Death,10,0);
        }
        sprite_index = spr_Boss_Orro_Roar;
    }
    
    if sprite_index = spr_Boss_Orro_Roar 
    and image_index &gt; 2 and image_index &lt; 6
    {
        global.shake = 20;
    }
        
    image_speed = animation/global.slowmo;
    
    break;
    
// Idle

    case 'idle': 
    
    sprite_index = spr_Boss_Orro_Idle;
    
    break;
    
// Roar

    case 'roar': 
    
    sprite_index = spr_Boss_Orro_Roar;
    
    if image_index = 2
    {
        audio_play_sound(snd_Atlas_Death,10,0);
    } 
    if sprite_index = spr_Boss_Orro_Roar 
    and image_index &gt; 2 and image_index &lt; 6
    {
        global.shake = 20;
    } 
    
    break;    

// Punch

    case 'punch': 
    
    sprite_index = spr_Boss_Orro_Punch;
    
    break;
    
// Damaged

    case 'damaged': 
    
    sprite_index = spr_Boss_Orro_Stunned;
    image_index = 1;
    if image_xscale &gt; 0
    {
        x += 1;
    }
    if image_xscale &lt; 0
    {
        x -= 1;
    }
    
    break;
    
// Stunned

    case 'stunned': 
    
    sprite_index = spr_Boss_Orro_Death;
    //image_index = 7;
    
    break;
    
// Get Up

    case 'getup': 
    
    sprite_index = spr_Boss_Orro_GetUp;
    
    break;
    
// Stuck

    case 'stuck': 
    
    image_speed = 1/4;
    sprite_index = spr_Boss_Orro_Stuck;
    
    
    
    break;
    
// Walk

    case 'walk': 
    
    sprite_index = spr_Boss_Orro_Walk;
    
    if image_xscale &gt; 0 
    {
        x -= move;
    }
    if image_xscale &lt; 0 
    {
        x += move;
    }

    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 10) vsp += grav;


//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),ceil(y+vsp),par_wall))
{
    while(!place_meeting((x),ceil(y+sign(vsp)),par_wall))
    {
        y += ceil(sign(vsp));
    }
    vsp = 0;
    
}

y += ceil(vsp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Floor
if y &gt; other. y
{
    y += -1;
}
else
{
    y -= 1;
}

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Hol_Orb_Follow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Change to Damaged

with other
{
    instance_destroy();
}

if other.stunner = 0
{
    state = 'damaged';
    x += 48;
}

if other.stunner = 1
{
    state = 'stunned';
    x += 64;
    audio_play_sound(snd_Death_Indicator,10,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Hol_Orb">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Change to Damaged

with other
{
    instance_destroy();
}

if other.stunner = 0
{
    state = 'damaged';
    x += 48;
}

if other.stunner = 1
{
    state = 'stunned';
    x += 64;
    audio_play_sound(snd_Death_Indicator,10,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transitions

// Entering Room

if sprite_index = spr_Boss_Orro_FallEnter and place_meeting(x,y+1,par_wall)
{
    sprite_index = spr_Boss_Orro_FallEnter1
}

if sprite_index = spr_Boss_Orro_FallEnter1
{
    roar = 1;
    image_index = 0;
}

if sprite_index = spr_Boss_Orro_Roar 
{
    state = 'idle';
    if timeline = 1 /// After Hol Talks this Runs
    {
        obj_Oenn_Body.timeline_index = tl_Oenn_Intro_3;
        obj_Oenn_Body.timeline_position = 0;
        obj_Oenn_Body.timeline_running = true;
        obj_Oenn_Body.timeline_loop = false;
        timeline = 0;
    }
}

// Punch to Idle

if sprite_index = spr_Boss_Orro_Punch
{
    state = 'idle';
}

// Death

if sprite_index = spr_Boss_Orro_Death //and state = 'stunned'
{
    image_index = 15;
    image_speed = 0;
}

// Getting Up

if sprite_index = spr_Boss_Orro_GetUp
{
    state = 'roar';
    timeline = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
