<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy_CrystalWalkerBlue_Walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>spr_Enemy_CW_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

animation = 1/4;

image_speed = animation;

// Stats

dirMAX = 2;  // Used to remember dir after Crystal Hold
dir = 2;
grav = .4;
hsp = 1.5;
vsp = 0;

enemy_hp = 1;

enemy_dmg = 2;

can_hold = 1 

ch_count = 0

flip = 0;

// Initial State

enemy_state = enemy_states.enemy_idle;

// Won't Go off Platform Edges

edgestop = 1;

enemy_shield = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scaling Sprites

//image_yscale = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Shell
//*
followOBJ = instance_create(x,y,obj_CW_Spike);

followOBJ.on = 0;

followOBJ.host = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Can Be Slashed,...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Can Be Slashed,...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawned

if sprite_index = spr_Enemy_CrystalWalkerBlue_Spawn
{
    enemy_state = enemy_states.enemy_walking;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Object Follow Master

if instance_exists(followOBJ)
{
    followOBJ.x = x;
    followOBJ.y = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    case enemy_states.enemy_spawn:
    
    sprite_index = spr_Enemy_CrystalWalkerBlue_Spawn;
    hsp = 0;
    
    break;
    
    // Movement
    case enemy_states.enemy_walking: 
    sprite_index = spr_Enemy_CrystalWalkerBlue_Walking
    hsp = dir/global.slowmo;
    if ((hsp &gt;= 0 and x &lt; obj_Oenn_Body.x and distance_to_object(obj_Oenn_Body) &lt; 32)
    or (hsp &lt;= 0 and x &gt; obj_Oenn_Body.x and distance_to_object(obj_Oenn_Body) &lt; 32))
    and (obj_Oenn_Body.y &lt;= (y+10) and obj_Oenn_Body.y &gt;= (y-10))
    {
        hsp = 0;
        image_index = 0;
        enemy_state = enemy_states.enemy_blocking;
    }
    break;
    
    //Idle
    case enemy_states.enemy_idle:
    enemy_shield = 0; 
    sprite_index = spr_Enemy_CrystalWalkerBlue_Idle
    break;
    
    // Blocking
    case enemy_states.enemy_blocking:
    enemy_shield = 1; 
    sprite_index = spr_Enemy_CrystalWalkerBlue_Withdraw
    if x &gt; obj_Oenn_Body.x
        {
            image_xscale = -1;
        }
    if x &lt; obj_Oenn_Body.x
        {
            image_xscale = 1;
        }
    // Oenn is Behind Enemy    
    if ((flip = 0 and x &lt; obj_Oenn_Body.x) and distance_to_object(obj_Oenn_Body) &gt; 32)
    or ((flip = 1 and x &gt; obj_Oenn_Body.x) and distance_to_object(obj_Oenn_Body) &gt; 32)
    {
        image_speed = animation;
        enemy_state = enemy_states.enemy_idle;
    }
    if (flip = 0 and x &gt; obj_Oenn_Body.x) 
    or (flip = 1 and x &lt; obj_Oenn_Body.x)
    {
        if distance_to_object(obj_Oenn_Body) &gt; 32
        {
        image_speed = animation;
        enemy_state = enemy_states.enemy_idle;
        }
    }
    break;
    
    // STUCK of damaged
    case enemy_states.enemy_damaged:
    hsp = 0;
    if !place_meeting(x,y,obj_Crystal_Hold_Center)
    {
        enemy_state = enemy_states.enemy_walking;
        hsp = dir/global.slowmo;
    }

    break;
    // Death
    
    case enemy_states.enemy_death:
    hsp = 0; 
    //followOBJ.enemy_state = enemy_states.enemy_death
    image_speed = 1/4;
    if image_index = 1 and distance_to_object(obj_Oenn_Body) &lt; 512
    {
        audio_play_sound(snd_CC_Death,10,0);
    }
    if sprite_index != spr_Enemy_CrystalWalkerBlue_Death
    {
    image_index = 0
    sprite_index = spr_Enemy_CrystalWalkerBlue_Death;
    }
    if sprite_index = spr_Enemy_CrystalWalkerBlue_Death and image_index = 10
    {
        instance_create(x,y,obj_Enemy_DeathSmoke);
        if distance_to_object(obj_Oenn_Body) &lt; 512
        {
            audio_play_sound(snd_Enemy_Death,10,0);
        }
        instance_create(x,y,obj_Shard_Small);
        if random(100) &lt; 75 then  // Chances for Health
           {
            instance_create(x,y,obj_Health_Small);
           }
        with (followOBJ)  // Destroys Shell
            {
                instance_destroy();
            }
        instance_destroy();
    }
    break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flip Sprite

if hsp &gt; 0
{
    flip = 1;
}
if hsp &lt; 0 
{
    flip = 0;
}

if flip = 1 
{
    image_xscale = -1;
}
else 
{
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 5) vsp += grav;


//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),ceil(y+vsp),par_wall))
{
    while(!place_meeting((x),ceil(y+sign(vsp)),par_wall))
    {
        y += ceil(sign(vsp));
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,par_Wall_Floor)
    {
        dir *= -1;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,par_Wall_Floor)
    {
        dir *= -1;
    }
}

//Vertical Collision Platforms

if (place_meeting((x),ceil(y+vsp),obj_Ghost_Platform))
{
    /*while(!place_meeting((x),(y+sign(vsp)),obj_Ghost_Platform))
    {
        y += sign(vsp);
    }*/
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        dir *= -1;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        dir *= -1;
    }
}

y += ceil(vsp);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Object Follow Master

if instance_exists(followOBJ)
{
    followOBJ.x = x;
    followOBJ.y = y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hold
/*
if place_meeting(x,y,obj_Crystal_Hold_Center)
{
    hsp = 0;
}

// Counter Other Coding
/*
if enemy_state = enemy_states.enemy_damaged
{
    enemy_state = enemy_states.enemy_walking;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if enemy_hp &lt;= 0
{
    enemy_state = enemy_states.enemy_death;
    with followOBJ
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at Wall

if (place_meeting(x+1,y,par_wall) or place_meeting(x-1,y,par_wall))
or (place_meeting(x+1,y,obj_Crystal_Wall) or place_meeting(x-1,y,obj_Crystal_Wall))
{
   dir *= -1;
   dirMAX *= -1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Slash">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recieve Damage and CB_Slash Switch

if cb_slashed = 1 
and enemy_state != enemy_states.enemy_death 
and enemy_state != enemy_states.enemy_blocking 
and enemy_shield = 0
and other.crouch = 1
and !collision_line(x,y,par_Slash.x,par_Slash.y,par_Enemy_Shield,false,false)
{
global.shake = 25;
room_speed = ff;
flash_timer = flash_duration; // Make enemy Flash
if x &gt; obj_Oenn_Body.x
{
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Slash_CollisionR, 6);
}
if x &lt; obj_Oenn_Body.x
{
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Slash_CollisionL, 6);
}
audio_play_sound(snd_Enemy_Damaged,10,0);
// Slash Energy
if origin_offcenter = 0
{
    instance_create(x,y,obj_Slash_Collision_Energy);
}
if origin_offcenter = 1
{
    instance_create(x_origin,y_origin,obj_Slash_Collision_Energy);
}
enemy_hp -= other.dmg;
cb_slashed = 0;
global.hitfreeze = hf;   // Freeze Moment
alarm[9] = 1;
alarm[11] = room_speed*.75;
}

// Slash Blocked

if enemy_state = enemy_states.enemy_blocking and !instance_exists(obj_Slash_Collision)
{
    instance_create(x,y,obj_Slash_Collision);
}

/// Enter Death State
/*
if enemy_hp &lt;= 0 
{
    enemy_state = enemy_states.enemy_death;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Floor
if enemy_state != enemy_states.enemy_death
{
    y = y-lengthdir_y(-1,90);
}

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Crystal_Hold_AOE">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle to Walking

if sprite_index = spr_Enemy_CrystalWalkerBlue_Idle
{
        hsp = dir/global.slowmo;
        enemy_state = enemy_states.enemy_walking;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Animation when Blocking

if sprite_index = spr_Enemy_CrystalWalkerBlue_Withdraw
{
    image_speed = 0;
    image_index = 7;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawned

if sprite_index = spr_Enemy_CrystalWalkerBlue_Spawn
{
    enemy_state = enemy_states.enemy_walking;
    followOBJ.on = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
