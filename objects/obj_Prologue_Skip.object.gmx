<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

yes = 0;

// Sound

audio_play_sound(snd_Select,10,0);

// Skip Banner Scrolling

banner = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn off Particle System

part_system_automatic_draw(global.particle_system,false);

part_system_automatic_draw(global.particle_system_front,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs


//Inputs Gamepad

h_move = gamepad_axis_value(global.cp, gp_axislh);  // Defining variable h_move as horizontal input from left stick
v_move = gamepad_axis_value(global.cp, gp_axislv);  // This one is vertical movement from left stick


Key_Left    =   -(gamepad_button_check(global.cp,gp_padl) or keyboard_check(vk_left) or h_move &lt; -0.4);
Key_Right   =   gamepad_button_check(global.cp,gp_padr) or keyboard_check(vk_right) or h_move &gt; 0.4;
Key_Up   =   gamepad_button_check(global.cp,gp_padu) or keyboard_check(vk_up) or v_move &lt; -0.4;
Key_Down   =   gamepad_button_check(global.cp,gp_padd) or keyboard_check(vk_down) or v_move &gt; 0.4;
Key_Jump    =   gamepad_button_check(global.cp,gp_face1) or keyboard_check(ord('V')) or keyboard_check(vk_space);
Key_Shot    =   gamepad_button_check(global.cp,gp_face3) or keyboard_check(ord('A'));
Key_Slash    =   gamepad_button_check(global.cp,gp_face4) or keyboard_check(ord('S'));
Key_B    =   gamepad_button_check(global.cp,gp_face2) or keyboard_check(ord('G'));
Key_LBump   =   gamepad_button_check(global.cp,gp_shoulderl) or keyboard_check(ord('W'));
Key_RBump   =   gamepad_button_check(global.cp,gp_shoulderr) or keyboard_check(ord('E'));
Key_LTrig   =   gamepad_button_check(global.cp,gp_shoulderlb) or keyboard_check(ord('Q'));
Key_RTrig   =   gamepad_button_check(global.cp,gp_shoulderrb) or keyboard_check(ord('R'));

Stick_UpRight = (v_move &lt; -0.2) and (h_move &gt; 0.4);
Stick_UpLeft = (v_move &lt; -0.2) and (h_move &lt; -0.4);
Stick_DownRight = (v_move &gt; 0.2) and (h_move &gt; 0.4);
Stick_DownLeft = (v_move &gt; 0.2) and (h_move &lt; -0.4);

Key_RStick    =     gamepad_axis_value(global.cp,gp_axisrv)

Key_BPressed    =   gamepad_button_check_pressed(global.cp,gp_face2) or keyboard_check_pressed(ord('G'));
Key_SlashPressed    =   gamepad_button_check_pressed(global.cp,gp_face4) or keyboard_check_pressed(ord('S'));
Key_LeftPressed    =   gamepad_button_check_pressed(global.cp,gp_padl) or keyboard_check_pressed(vk_left);
Key_RightPressed   =   gamepad_button_check_pressed(global.cp,gp_padr) or keyboard_check_pressed(vk_right);
Key_UpPressed   =   gamepad_button_check_pressed(global.cp,gp_padu) or keyboard_check_pressed(vk_up);
Key_DownPressed   =   gamepad_button_check_pressed(global.cp,gp_padd) or keyboard_check_pressed(vk_down);
Key_JumpPressed    =   gamepad_button_check_pressed(global.cp,gp_face1) or keyboard_check_pressed(ord('V')) or keyboard_check_pressed(vk_space);
Key_ShotPressed    =   gamepad_button_check_pressed(global.cp,gp_face3) or keyboard_check_pressed(ord('A'));
Key_LBumpPressed   =   gamepad_button_check_pressed(global.cp,gp_shoulderl) or keyboard_check_pressed(ord('W'));
Key_RBumpPressed   =   gamepad_button_check_pressed(global.cp,gp_shoulderr) or keyboard_check_pressed(ord('E'));

Key_UpRelease   =   gamepad_button_check_released(global.cp,gp_padu) or keyboard_check_released(vk_up);
Key_ShotRelease    =   gamepad_button_check_released(global.cp,gp_face3) or keyboard_check_released(ord('A'));
Key_SlashRelease    =   gamepad_button_check_released(global.cp,gp_face4) or keyboard_check_released(ord('S'));
Key_JumpRelease    =  gamepad_button_check_released(global.cp,gp_face1) or keyboard_check_released(ord('V')) or keyboard_check_released(vk_space);
Key_BRelease    =   gamepad_button_check_released(global.cp,gp_face2) or keyboard_check_released(ord('G'));
Key_RTrigRelease   =   gamepad_button_check_released(global.cp,gp_shoulderrb) or keyboard_check_released(ord('R'));
Key_LBumpRelease   =   gamepad_button_check_released(global.cp,gp_shoulderl) or keyboard_check_released(ord('W'));


Key_RStick    =     gamepad_axis_value(global.cp,gp_axisrv);

Key_RStickButton    =     gamepad_button_check_pressed(global.cp,gp_stickr);

Key_Start    =     gamepad_button_check_pressed(global.cp,gp_start) or keyboard_check_pressed(vk_enter);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Skip Banner

banner += .25;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Left and Right

if Key_RightPressed and yes = 1
{
    yes = 0;
    audio_play_sound(snd_Selection_Change,10,0);
}

if Key_LeftPressed and yes = 0
{
    yes = 1;
    audio_play_sound(snd_Selection_Change,10,0);
}

// Cancel and No

if Key_B or Key_Start
{
    audio_play_sound(snd_Select,10,0);
    part_system_automatic_draw(global.particle_system,true);
    part_system_automatic_draw(global.particle_system_front,true);
    instance_destroy();
}

if yes = 0 and Key_Jump
{
    audio_play_sound(snd_Select,10,0);
    part_system_automatic_draw(global.particle_system,true);
    part_system_automatic_draw(global.particle_system_front,true);
    instance_destroy();
}


// SKIP INTRO

if yes = 1 and Key_Jump
{
    audio_play_sound(snd_Select,10,0);
    
    with obj_HUD
    {
        instance_destroy();
    }
    audio_stop_all();
    
    //////////////////////////////////////////////// Clear Particles and Emitters

    // Particle System Front
    part_system_clear(global.particle_system_front);
    
    part_emitter_destroy_all(global.particle_system_front);
    
    part_system_depth(global.particle_system,-100000000);
    
    
    // Particle System Mid
    part_system_clear(global.particle_system);
    
    part_emitter_destroy_all(global.particle_system);
    
    part_system_depth(global.particle_system,-900);
    
    
    // Particle System Below
    part_system_clear(global.particle_system_back);
    
    part_emitter_destroy_all(global.particle_system_back);
    
    part_system_depth(global.particle_system_back,900);
    
    // Particle System Background
    part_system_clear(global.particle_system_background);
    
    part_emitter_destroy_all(global.particle_system_background);
    
    part_system_depth(global.particle_system_background,1000200);
    
    // Particle System Background 10000001
    part_system_clear(global.particle_system_background_10000001);
    
    part_emitter_destroy_all(global.particle_system_background_10000001);
    
    part_system_depth(global.particle_system_background_10000001,10000001);
    
    
    
    // Room Switch
    if global.prologuenext = 0
    {
        room_goto(room_Matte_Black);
    }
    // Start New Game
    if global.prologuenext = 1
    {
        room_goto(room_IntroStage_00);
        instance_create(x,y,obj_room_fade_in);
        with instance_create(596,334,obj_Oenn_Body)
        {
            state = states.sitting;
            enterfirst = 1;
        }
        instance_create(596,334,obj_Oenn_Legs)
        audio_play_sound(snd_Select,10,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn of Particle System

//part_system_automatic_draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Skip Question and fade

/// Draw Faded Black Screen 

draw_sprite_ext(spr_WhiteBox,0,view_xview + view_wview / 2,view_yview + view_hview / 2,30,30,0,c_dkgray,.25);


/// Draw Faded Black Bar 

draw_sprite_ext(spr_WhiteBox,0,view_xview + view_wview / 2,(view_yview+view_hview/2)+4,30,4.25,0,c_black,.75);

// Question

draw_sprite_ext(spr_Prologue_SkipMenu,0,view_xview + view_wview / 2,(view_yview + view_hview / 2)-16,1,1,0,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Yes and Know

if yes = 0
{
    // Yes off
    draw_sprite_ext(spr_Prologue_SkipMenu_Yes,0,(view_xview + view_wview / 2)-24,(view_yview + view_hview / 2)+32,1,1,0,c_white,1);
    // No on
    draw_sprite_ext(spr_Prologue_SkipMenu_No,1,(view_xview + view_wview / 2)+24,(view_yview + view_hview / 2)+32,1,1,0,c_white,1);
}

if yes = 1
{
    // Yes on
    draw_sprite_ext(spr_Prologue_SkipMenu_Yes,1,(view_xview + view_wview / 2)-24,(view_yview + view_hview / 2)+32,1,1,0,c_white,1);
    // No off
    draw_sprite_ext(spr_Prologue_SkipMenu_No,0,(view_xview + view_wview / 2)+24,(view_yview + view_hview / 2)+32,1,1,0,c_white,1);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_Prologue_Skip</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Skip Banner Scroll

draw_background_tiled_horizontal(bck_Prologue_SkipMenu_Banner,view_xview + view_wview +130 - banner,view_yview + view_hview / 2-64) // Draw background that move slowest 

draw_background_tiled_horizontal(bck_Prologue_SkipMenu_Banner,view_xview + view_wview - banner,view_yview + view_hview / 2+64) // Draw background that move slowest 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
