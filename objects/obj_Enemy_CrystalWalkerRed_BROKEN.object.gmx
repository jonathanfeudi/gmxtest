<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>spr_Enemy_CW_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

animation = 1/4;

image_speed = animation;

// Stats

dir = 2;
grav = .4;
hsp = 1.5;
vsp = 0;

flip = 1;

enemy_hp = 7;

enemy_dmg = 5;

// Initial State

enemy_state = enemy_states.enemy_idle;

// Won't Go off Platform Edges

edgestop = 1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scaling Sprites

image_yscale = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block

alarm[0] = room_speed*5
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Shell

followOBJ = instance_create(x,y,obj_CW_Spike);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Can Be Slashed,...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Walk again

enemy_state = enemy_states.enemy_idle;
image_speed = animation;

/// Block

alarm[0] = room_speed*5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Down

down = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block

enemy_state = enemy_states.enemy_blocking;

alarm[2] = room_speed*5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Object Follow Master


followOBJ.x = x;
followOBJ.y = y;
followOBJ.image_angle = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    // Movement
    case enemy_states.enemy_walking: 
    sprite_index = spr_Enemy_CrystalWalkerRed_Walking
    direction = 0;
    hsp = dir/global.slowmo;
        
    
    /*if ((hsp &gt; 0 and x &lt; obj_Oenn_Body.x and distance_to_object(obj_Oenn_Body) &lt; 64)
    or (hsp &lt; 0 and x &gt; obj_Oenn_Body.x and distance_to_object(obj_Oenn_Body) &lt; 64))
    and (obj_Oenn_Body.y &lt;= (y+10) and obj_Oenn_Body.y &gt;= (y-10))
    {
        hsp = 0;
        image_index = 0;
        enemy_state = enemy_states.enemy_blocking;
    }*/
    break;
    
    
    // Rotate Down
    case enemy_states.enemy_rotatedown: 
    sprite_index = spr_Enemy_CrystalWalkerRed_Walking 
    direction = 270;
    hsp = 0;   
    vsp = 2;
    
    if !floor(place_meeting((x-4), y+4,par_wall))
    {
        y += 4;
        enemy_state = enemy_states.enemy_rotateupsidedown;
    }
    break;
    
    // Rotate Upside Down
    case enemy_states.enemy_rotateupsidedown: 
    sprite_index = spr_Enemy_CrystalWalkerRed_Walking 
    direction = 180;
    vsp = 0;
    hsp = -2;
    flip = 1;
    
    if !floor(place_meeting((x-4), y-4,par_wall))
    {
        x -= 4;
        enemy_state = enemy_states.enemy_rotateup;
    }
    break;
    
     // Rotate Up
    case enemy_states.enemy_rotateup:  
    sprite_index = spr_Enemy_CrystalWalkerRed_Walking
    direction = 90;
    vsp = -2;
    hsp = 0;
    
    if !floor(place_meeting((x+4), y-4,par_wall))
    {
        y -= 8;
        enemy_state = enemy_states.enemy_walking;
    }
    break;
    
    //Idle
    case enemy_states.enemy_idle:
    enemy_shield = 0; 
    sprite_index = spr_Enemy_CrystalWalkerRed_Idle
    vsp = 0;
    hsp = 0;
    break;
    
    // Blocking
    case enemy_states.enemy_blocking:
    enemy_shield = 1; 
    vsp = 0;
    hsp = 0;
    sprite_index = spr_Enemy_CrystalWalkerRed_Withdraw
    /*if x &gt; obj_Oenn_Body.x
        {
            image_xscale = -2;
        }
    if x &lt; obj_Oenn_Body.x
        {
            image_xscale = 2;
        }
    // Oenn is Behind Enemy    
    if (flip = 0 and x &lt; obj_Oenn_Body.x) 
    or (flip = 1 and x &gt; obj_Oenn_Body.x)
    {
        image_speed = animation;
        enemy_state = enemy_states.enemy_idle;
    }
    if (flip = 0 and x &gt; obj_Oenn_Body.x) 
    or (flip = 1 and x &lt; obj_Oenn_Body.x)
    {
        if distance_to_object(obj_Oenn_Body) &gt; 128
        {
        image_speed = animation;
        enemy_state = enemy_states.enemy_idle;
        }
    }
    */
    

    break;
    // Death
    
    case enemy_states.enemy_death:
    hsp = 0; 
    vsp = 0;
    followOBJ.enemy_state = enemy_states.enemy_death
    image_speed = 1/4;
    if sprite_index != spr_Enemy_CrystalWalkerRed_Death
    {
    image_index = 0
    sprite_index = spr_Enemy_CrystalWalkerRed_Death;
    }
    if sprite_index = spr_Enemy_CrystalWalkerRed_Death and image_index = 10
    {
        instance_create(x,y,obj_Enemy_DeathSmoke);
        audio_play_sound(snd_Enemy_Death,10,0);
        instance_create(x,y,obj_Shard_Small);
        if random(100) &lt; 50 then  // Chances for Health
           {
            instance_create(x,y,obj_Health_Small);
           }
        with (followOBJ)  // Destroys Shell
            {
                instance_destroy();
            }
        instance_destroy();
    }
    break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flip Sprite

if hsp &gt; 0 
{
    flip = 1;
}
if hsp &lt; 0 
and enemy_state != enemy_states.enemy_rotateupsidedown 
and enemy_state != enemy_states.enemy_rotateup 
{
    flip = 0;
}

if flip = 1 
{
    image_xscale = -2;
}
else 
{
    image_xscale = 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity
if enemy_state = enemy_states.enemy_walking
{
if (vsp &lt; 5) vsp += grav;
}

//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),(y+vsp),par_wall))
{
    while(!place_meeting((x),(y+sign(vsp)),par_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,par_wall)
    {
        x += 20;
        enemy_state = enemy_states.enemy_rotatedown;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,par_wall)
    {
        x -= 20;
        enemy_state = enemy_states.enemy_rotatedown;
    }
}

//Vertical Collision Platforms

if (place_meeting((x),round(y+vsp),obj_Ghost_Platform))
{
    while(!place_meeting((x),(y+sign(vsp)),obj_Ghost_Platform))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        dir *= -1;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        dir *= -1;
    }
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if enemy_hp &lt;= 0
{
    enemy_state = enemy_states.enemy_death;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at Wall CHANGE TO CRAWL UP OR DOWN!!!
/*
if place_meeting(x+1,y,par_wall) or place_meeting(x-1,y,par_wall) 
{
   dir *= -1;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Angle

image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Floor
/*if enemy_state != enemy_states.enemy_death
{
    y = y-lengthdir_y(-1,90);
}

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle to Walking

if sprite_index = spr_Enemy_CrystalWalkerRed_Idle and direction = 0
{
        hsp = dir/global.slowmo;
        enemy_state = enemy_states.enemy_walking;
}

if sprite_index = spr_Enemy_CrystalWalkerRed_Idle and direction = 270
{
        hsp = dir/global.slowmo;
        enemy_state = enemy_states.enemy_rotatedown;
}

if sprite_index = spr_Enemy_CrystalWalkerRed_Idle and direction = 180
{
        hsp = dir/global.slowmo;
        enemy_state = enemy_states.enemy_rotateupsidedown;
}

if sprite_index = spr_Enemy_CrystalWalkerRed_Idle and direction = 90
{
        hsp = dir/global.slowmo;
        enemy_state = enemy_states.enemy_rotateup;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Animation when Blocking

if sprite_index = spr_Enemy_CrystalWalkerRed_Withdraw
{
    image_speed = 0;
    image_index = 7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
