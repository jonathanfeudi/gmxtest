<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textnext</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Variables

image_speed = 1/4;

// Array

menu_confirm[0] = "Learn Crystal Art";
menu_confirm[1] = "Back";

CrystalHold = 0;
CrystalWall = 0;
CrystalOrb = 0;
CrystalArmor = 0;
LucidTime = 0;
LucidTeleport = 0;

space = 24;
mpos = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Control
Key_UpPressed   =   gamepad_button_check_pressed(global.cp,gp_padu) or keyboard_check_pressed(vk_up);
Key_DownPressed   =   gamepad_button_check_pressed(global.cp,gp_padd) or keyboard_check_pressed(vk_down);

Key_JumpRelease    =  gamepad_button_check_pressed(global.cp,gp_face1) or keyboard_check_pressed(vk_space);
Key_StartRelease    =     gamepad_button_check_pressed(global.cp,gp_start) or keyboard_check_pressed(vk_enter);

var move = 0;
move -= max(Key_UpPressed,0);
move += max(Key_DownPressed,0);

if (move != 0)
{
    audio_play_sound(snd_Selection_Change,10,0);
    mpos += move;
    if (mpos &lt; 0) mpos = array_length_1d(menu_confirm) - 1;  // loops around if menu clicks past last option
    if (mpos &gt; array_length_1d(menu_confirm) - 1) mpos = 0;  // loops around if menu clicks past last option
}

var push;
push = max(Key_JumpRelease,Key_StartRelease,0);

if (push == 1) scr_Confirm_CA();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the surface to the screen with BLUR!

if (surface_exists(CA_menu)){  // Make sure surface exists - if game loses focus, the surface can sometimes be lost.
    // This is just a bunch of crazy shader blur stuff, probably shouldn't change any of it.
    var sigma = shader_get_uniform(shade_blur,"sigma");
    var blurSize = shader_get_uniform(shade_blur,"blurSize");
    shader_set(shade_blur);
    shader_set_uniform_f(sigma,0.001+1.5);
    shader_set_uniform_f(blurSize,1.0/512.0);
    
    draw_surface(CA_menu, view_xview[0], view_yview[0]);
    
    shader_reset();
    }
else
    {
    // If the surface gets lost, the following recreates it and redraws all the instances.
    instance_activate_all(); // Activate all the instances again just for 1 step so they can be redrawn to the surface.
    /*instance_activate_object(obj_Save_Menu);
    instance_activate_object(obj_Save_Menu_Back);
    instance_activate_object(obj_Save_Menu_Crystal_Arts);
    instance_activate_object(obj_Save_Menu_Save);
    */
    CA_menu = surface_create(view_wview[0], view_hview[0]);
    alarm[0] = 1; // The instances must appear to the screen for 1 step to be redrawn.
    }



/// [OPTIONAL] Draws a partially transparent rectangle over everything.
draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview-view_wview/2,view_yview-view_hview/2,room_width+256,room_height+256,0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pink Background

draw_sprite(spr_Save_Menu_Base,-1,(view_xview+view_wview/2) , view_yview+view_hview/2 )
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW MENU.. Will update to be fancier

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_speach_small);
draw_set_color(c_white);

var m;
for (m = 0; m &lt; array_length_1d(menu_confirm); m +=1)
{
    draw_text_transformed(x, y + (m * space), string(menu_confirm[m]),.5,.5,0)
}

draw_sprite_ext(sprite_index,-1, x-112,y + mpos * space,.5,.5,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Shard Meter

// Shards

draw_set_font(Shard_Meter);

draw_set_color(c_yellow);

// Shard Meter Background

draw_sprite_ext(spr_HUD_ShardCount,0,x+53,y-49,1,1,0,c_white,1);


draw_text_ext_transformed(x+53,y-49,string(global.Oenn_shards),8,1000000,.75,.75,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
