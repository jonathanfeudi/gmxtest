<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000001</depth>
  <persistent>0</persistent>
  <parentName>par_Save_Menus</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create surface, draw everything to it, deactivate all other instances

save_menu_surf = surface_create(view_wview[0], view_hview[0]);
// Makes the surface the size of the view.

surface_set_target(save_menu_surf);
draw_clear_alpha(c_black, 0); // Clears surface.
with(all) 
{ 
  if (visible == true)
  { 
        x = x-view_xview[0];  y = y-view_yview[0]; // Moves all instances to the top left corner, so they will appear in the correct place on the surface
        event_perform(ev_draw,0); 
        x = x+view_xview[0];  y = y+view_yview[0]; // Move the instances back to their original spot.
  } 
}   // Draws every visible instance to surface.
surface_reset_target();

instance_deactivate_all(true);
visible = true;

size = 1.5; // Change this amount to change the amount of blur

///Menu Variables

selectedcontrol = 0;

instance_create(x,y-35,obj_Save_Menu_Save);

instance_create(x,y,obj_Save_Menu_Crystal_Arts);

instance_create(x,y+35,obj_Save_Menu_Back);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This alarm should ONLY be used when the surface is lost.
// The following is the same that happens in the create event. It is just redrawing all the instances to the surface.
/*
surface_set_target(surf);
draw_clear_alpha(c_black, 0);
with(all) { if (visible == true) {
        x = x-view_xview[0];  y = y-view_yview[0];
        event_perform(ev_draw,0); 
        x = x+view_xview[0];  y = y+view_yview[0];
         } }
surface_reset_target();

instance_deactivate_all(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs Gamepad
Key_Left    =   gamepad_button_check_pressed(global.cp,gp_padl) or keyboard_check_pressed(vk_left);
Key_Right   =   gamepad_button_check_pressed(global.cp,gp_padr) or keyboard_check_pressed(vk_right);
Key_Up   =   gamepad_button_check_pressed(global.cp,gp_padu) or keyboard_check_pressed(vk_down);
Key_Down   =   gamepad_button_check_pressed(global.cp,gp_padd) or keyboard_check_pressed(vk_down);
Key_A    =   gamepad_button_check_pressed(global.cp,gp_face1) or keyboard_check_pressed(vk_enter);
//Key_B    =   gamepad_button_check_pressed(global.cp,gp_face2) or keyboard_check_pressed(vk_backspace);
Key_B    =   gamepad_button_check_pressed(global.cp,gp_face2) or keyboard_check_pressed(ord('X'));



Key_UpPressed   =   gamepad_button_check_pressed(global.cp,gp_padu) or keyboard_check_pressed(vk_up);
Key_DownPressed   =   gamepad_button_check_pressed(global.cp,gp_padd) or keyboard_check_pressed(vk_down);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unpause, clear surface, re-activate all objects.

Key_Start    =     gamepad_button_check_pressed(global.cp,gp_start)
Key_B    =   gamepad_button_check_pressed(global.cp,gp_face2) or keyboard_check_pressed(ord('X'));

if !instance_exists(obj_CrystalArts_Menu)
{
if (Key_Start or Key_B)
and !instance_exists(obj_Save_Bar)
{
    surface_free(save_menu_surf);
    instance_activate_all(); // Activate all the objects again
    instance_destroy();
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection and Selecting

if !instance_exists(obj_CrystalArts_Menu)
{
//Save
if instance_exists(obj_Save_Menu_Save)
{
if selectedcontrol = 0
{
    obj_Save_Menu_Save.selected = 1;
}
else
{
    obj_Save_Menu_Save.selected = 0;
}


//Save Selected

if obj_Save_Menu_Save.selected = 1 and Key_A and !instance_exists(obj_Save_Bar)
{
    script_execute(Saving);
    instance_create(view_xview+view_wview/2,view_yview+view_hview/2,obj_Save_Bar);
    if global.Oenn_hp &lt; global.Oenn_hpMAX
    {
        global.gotHT = 1;
    }
    // Added for Animation
    surface_free(save_menu_surf);
    instance_activate_all(); // Activate all the objects again
    instance_destroy();
}
}
// Crystal Arts

if instance_exists(obj_Save_Menu_Crystal_Arts)
{
if selectedcontrol = 1
{
    obj_Save_Menu_Crystal_Arts.selected = 1;
}
else
{
    obj_Save_Menu_Crystal_Arts.selected = 0;
}

// Crystal Arts Selected

if obj_Save_Menu_Crystal_Arts.selected = 1 and Key_A and !instance_exists(obj_Save_Bar)
{
    if !instance_exists(obj_CrystalArts_Menu_Car)
    {
        surface_free(save_menu_surf);
        instance_create(view_xview+view_wview/2,(view_yview+view_hview/2)-72,obj_CrystalArts_Menu_Car);
        instance_destroy();
    }
}
}

//Back

if instance_exists(obj_Save_Menu_Back)
{
if selectedcontrol = 2
{
    obj_Save_Menu_Back.selected = 1;
}
else
{
    obj_Save_Menu_Back.selected = 0;
}

//Select Back

if obj_Save_Menu_Back.selected = 1 and Key_A
{
    if global.Oenn_hp &lt; global.Oenn_hpMAX
    {
        global.gotHT = 1;
    }
    //global.menujump = 10;
    surface_free(save_menu_surf);
    instance_activate_all(); // Activate all the objects again
    instance_destroy();
}   
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection Control
if !instance_exists(obj_CrystalArts_Menu)
and !instance_exists(obj_Save_Bar)
{
    if Key_UpPressed and selectedcontrol != 0
    {
        selectedcontrol -= 1;
        audio_play_sound(snd_Selection_Change,10,0);
    }
    
    if Key_DownPressed and selectedcontrol != 2
    {
        selectedcontrol += 1;
        audio_play_sound(snd_Selection_Change,10,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear surface

surface_free(save_menu_surf); // It's good practice to always clear the surface on room end, in case the room changes while the pause object is still hanging out.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the surface to the screen with BLUR!

if (surface_exists(save_menu_surf)){  // Make sure surface exists - if game loses focus, the surface can sometimes be lost.
    // This is just a bunch of crazy shader blur stuff, probably shouldn't change any of it.
    var sigma = shader_get_uniform(shade_blur,"sigma");
    var blurSize = shader_get_uniform(shade_blur,"blurSize");
    shader_set(shade_blur);
    shader_set_uniform_f(sigma,0.001+1.5);
    shader_set_uniform_f(blurSize,1.0/512.0);
    
    draw_surface(save_menu_surf, view_xview[0], view_yview[0]);
    
    shader_reset();
    }
else
    {
    // If the surface gets lost, the following recreates it and redraws all the instances.
    //instance_activate_all(); // Activate all the instances again just for 1 step so they can be redrawn to the surface.
    save_menu_surf = surface_create(view_wview[0], view_hview[0]);
    alarm[0] = 1; // The instances must appear to the screen for 1 step to be redrawn.
    }



/// [OPTIONAL] Draws a partially transparent rectangle over everything.
draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview-view_wview/2,view_yview-view_hview/2,room_width*2,room_height*2,0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pink Background

draw_sprite(spr_Save_Menu_Base,-1,(view_xview+view_wview/2) , view_yview+view_hview/2 )
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
