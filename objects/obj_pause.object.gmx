<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create surface, draw everything to it, deactivate all other instances

pause_surf = surface_create(view_wview[0], view_hview[0]);
// Makes the surface the size of the view.

surface_set_target(pause_surf);
draw_clear_alpha(c_black, 0); // Clears surface.
with(all) 
{ 
  if (visible == true)
  { 
        x = x-view_xview[0];  y = y-view_yview[0]; // Moves all instances to the top left corner, so they will appear in the correct place on the surface
        event_perform(ev_draw,0); 
        x = x+view_xview[0];  y = y+view_yview[0]; // Move the instances back to their original spot.
  } 
}   // Draws every visible instance to surface.
surface_reset_target();

instance_deactivate_all(true);
visible = true;

size = 1.5; // Change this amount to change the amount of blur


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This alarm should ONLY be used when the surface is lost.
// The following is the same that happens in the create event. It is just redrawing all the instances to the surface.

surface_set_target(pause_surf);
draw_clear_alpha(c_black, 0);
with(all) { if (visible == true) {
        x = x-view_xview[0];  y = y-view_yview[0];
        event_perform(ev_draw,0); 
        x = x+view_xview[0];  y = y+view_yview[0];
         } }
surface_reset_target();

instance_deactivate_all(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unpause, clear surface, re-activate all objects.

Key_Start    =     gamepad_button_check_pressed(global.cp,gp_start) or keyboard_check_pressed(vk_enter);


if Key_Start
{
    surface_free(pause_surf);
    instance_activate_all(); // Activate all the objects again
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear surface

surface_free(pause_surf); // It's good practice to always clear the surface on room end, in case the room changes while the pause object is still hanging out.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Heart Containers

// Heart Tank 1
if global.statusupgrades[0] = 1
{
    draw_sprite_ext(spr_Heart_Tank,0,314,268,2,2,0,c_white,1);
}

// Heart Tank 2
if global.statusupgrades[1] = 1
{
    draw_sprite_ext(spr_Heart_Tank,0,418,268,2,2,0,c_white,1);
}

// Heart Tank 3
if global.statusupgrades[2] = 1
{
    draw_sprite_ext(spr_Heart_Tank,0,523,268,2,2,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [OPTIONAL] Draw instructions to the screen
/*
if surface_exists(pause_surf)
    {
        draw_surface_ext(pause_surf,0,0,2,2,0,c_white,1);
    }
    
/// [OPTIONAL] Draw instructions to the screen

draw_sprite(spr_Pause_Base,-1,(view_xview+view_wview) , view_yview+view_hview )


draw_sprite(spr_Pause_Base,-1,(1920/2) ,1080/2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Lucid Crystals

// Lucid 1
if global.LucidCrystals = 1
{
    draw_sprite_ext(spr_Lucid_Crystal,0,733,300,4,4,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the surface to the screen with BLUR!

if (surface_exists(pause_surf)){  // Make sure surface exists - if game loses focus, the surface can sometimes be lost.
    // This is just a bunch of crazy shader blur stuff, probably shouldn't change any of it.
    var sigma = shader_get_uniform(shade_blur,"sigma");
    var blurSize = shader_get_uniform(shade_blur,"blurSize");
    shader_set(shade_blur);
    shader_set_uniform_f(sigma,0.001+size);
    shader_set_uniform_f(blurSize,1.0/512.0);
    
    draw_surface(pause_surf, view_xview[0], view_yview[0]);
    //view_surface_id[0] = pause_surf;
    
    shader_reset();
    }
else
    {
    // If the surface gets lost, the following recreates it and redraws all the instances.
    instance_activate_all(); // Activate all the instances again just for 1 step so they can be redrawn to the surface.
    pause_surf = surface_create(view_wview[0], view_hview[0]);
    alarm[0] = 1; // The instances must appear to the screen for 1 step to be redrawn.
    }


/*
/// [OPTIONAL] Draws a partially transparent rectangle over everything.

draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(0,0,room_width,room_height,0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// [OPTIONAL] Draw instructions to the screen

/// [OPTIONAL] Draws a partially transparent rectangle over everything.

draw_set_color(c_black);
draw_set_alpha(1);
//draw_rectangle(0,0,room_width,room_height,0);
draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_wview,view_yview[0]+view_hview,false);
draw_set_alpha(1);

// Pause Menu Background

draw_sprite(spr_Pause_Base,-1,(view_xview+view_wview/2) , view_yview+view_hview/2 )
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>375,250</point>
    <point>375,375</point>
  </PhysicsShapePoints>
</object>
