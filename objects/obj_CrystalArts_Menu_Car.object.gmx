<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Skill_Carousel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

selected = 0;
rot = 0;
item = 0;

// Set Menu Position

menu_x = (view_xview+view_wview/2);
menu_y = (view_yview+view_hview/2);

// Set the Size of the Menu

menu_width = 350;
menu_height = 100;

/// Create surface, draw everything to it, deactivate all other instances

CA_menu = surface_create(view_wview[0], view_hview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Selection

Key_LeftPressed    =   gamepad_button_check_pressed(global.cp,gp_padl) or keyboard_check_pressed(vk_left);
Key_RightPressed   =   gamepad_button_check_pressed(global.cp,gp_padr) or keyboard_check_pressed(vk_right);

if Key_LeftPressed 
{
    selected += 1
    audio_play_sound(snd_Selection_Change,10,0);
}
else if Key_RightPressed
{
    selected -= 1;
    audio_play_sound(snd_Selection_Change,10,0);
}

// Rotate the Menu

rot -= scr_angle_difference(rot,selected*(360/image_number))/(0.2*room_speed);

// Setting the Item to the Selection

item = -selected mod image_number;

if (item) &lt; 0 {item += image_number};



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection

Key_A    =   gamepad_button_check_pressed(global.cp,gp_face1) or keyboard_check_pressed(ord('A'));

if Key_A
{
    switch(item){
        case 0:     
    {
        // Learn Hold
        if global.Oenn_shards &gt;= 10
        and global.CrystalHold = 0
        and global.LucidCrystals &gt;= 1
        {
            instance_change(obj_Confirm_CA,true)
            {
                CrystalHold = 1;
            }
        }
        // Switch Skill
        if global.CrystalHold = -1
        and global.CrystalWall = 1     /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                CrystalHold = 1;
            }
         }
            exit;
    }
        break;
    
    case 1:     // Crystal Wall
    {
        if global.Oenn_shards &gt;= 10
        and global.CrystalWall = 0
        and global.LucidCrystals &gt;= 1
        {
            instance_change(obj_Confirm_CA,true)
            {
                CrystalWall = 1;
            }
        }
        // Switch Skill
        if global.CrystalHold = 1
        and global.CrystalWall = -1 /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                CrystalWall = 1;
            }
         }
            exit;
        }
        break;
    
    case 2:     // Crystal Orb
    {
        if global.Oenn_shards &gt;= 20
        and global.CrystalOrb = 0
        and global.LucidCrystals &gt;= 2
        {
            instance_change(obj_Confirm_CA,true)
            {
                CrystalOrb = 1;
            }
        }
        // Switch Skill
        if global.CrystalOrb = -1
        and global.CrystalArmor = 1 /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                CrystalOrb = 1;
            }
         }
            exit;
        }
        break;
   
    case 3:     // Crystal Armor
    {
        if global.Oenn_shards &gt;= 20
        and global.CrystalArmor = 0
        and global.LucidCrystals &gt;= 2
        {
            instance_change(obj_Confirm_CA,true)
            {
                CrystalArmor = 1;
            }
        }
           // Switch Skill
        if global.CrystalOrb = 1
        and global.CrystalArmor = -1    /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                CrystalArmor = 1;
            }
         }
            exit;
        }
        break;
        
        
    case 4:     // Lucid Time
    {
        if global.Oenn_shards &gt;= 40
        and global.LucidTime = 0
        and global.LucidCrystals &gt;= 3
        {
            instance_change(obj_Confirm_CA,true)
            {
                LucidTime = 1;
            }
        }
        // Switch Skill
        if global.LucidTime = -1
        and global.LucidTeleport = 1    /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                LucidTime = 1;
            }
         }
            exit;
        }
        break;

        
    case 5:     // Lucid Teleport
    {
        if global.Oenn_shards &gt;= 40
        and global.LucidCrystals &gt;= 3
        and global.LucidTeleport = 0
        {
            instance_change(obj_Confirm_CA,true)
            {
                LucidTeleport = 1;
            }
        }
        // Switch Skill
        if global.LucidTime = 1
        and global.LucidTeleport = -1   /// IMPLEMENT COCOs VARIABLE... she gives the swap ability
         {
            instance_change(obj_Switch_CA,true)
            {
                LucidTeleport = 1;
            }
         }
            exit;
        }
        break;
   
    default: break;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back to Save Menu
Key_BPressed    =   gamepad_button_check_pressed(global.cp,gp_face2) or keyboard_check_pressed(ord('X'));

if Key_BPressed
{
//surface_free(CA_menu);
        if !instance_exists(obj_Save_Menu)
        {
            instance_create(view_xview+view_wview/2,view_yview+view_hview/2,obj_Save_Menu);
        }
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Black Rectangle
draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview-view_wview/2,view_yview-view_hview/2,room_width+256,room_height+256,0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Shard Meter

// Shards

draw_set_font(Shard_Meter);

draw_set_color(c_yellow);

// Shard Meter Background

draw_sprite_ext(spr_HUD_ShardCount,0,100,100,1,1,0,c_white,1);

draw_text_ext_transformed(100,100,string(global.Oenn_shards),8,1000000,.75,.75,0)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Some Variables

var pr, i;

i = 0;

pr = ds_priority_create();

// Add Menu items to the priority queue

repeat (image_number)
{
    ds_priority_add(pr,i,lengthdir_y(1,(rot-90) + i*(360/image_number)));
    i += 1;
}

// Draw Menu

repeat(image_number)
{
    i = ds_priority_delete_min(pr);
    // pasted from youtube
    draw_sprite_ext(sprite_index, 
    i,(view_wview/2)+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)), 
    (view_hview/2)+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)), 
    1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2), 
    1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
}
/*
repeat(image_number)
{
    i = ds_priority_delete_min(pr);
    // pasted from youtube
    draw_sprite_ext(sprite_index, 
    i,menu_x+lengthdir_x(menu_width/2,(rot-90)+i*(360/image_number)), 
    menu_y+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number)), 
    1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2), 
    1+lengthdir_y(menu_height/2,(rot-90)+i*(360/image_number))/(menu_height*2),0,c_white,1);
}*/

// Remove DS priority

ds_priority_destroy(pr);

// Draw Text

var t;

switch(item)
{
    case 0: t = "Crystal Hold" break;
    case 1: t = "Crystal Wall" break;
    case 2: t = "Crystal Orb" break;
    case 3: t = "Crystal Armor" break;
    case 4: t = "Lucid Time" break;
    case 5: t = "Lucid Teleport" break;
    default: t = "" break;
}

draw_set_halign(fa_center);
draw_text(view_wview/2,(view_hview/2)-125,t);
//draw_text(view_xview+view_wview/2,(view_yview+view_hview/2)-125,t);
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Black Surface

draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview-view_wview/2,view_yview-view_hview/2,room_width*2,room_height*2,0);
draw_set_alpha(1);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
