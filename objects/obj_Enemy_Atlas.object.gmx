<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy_Atlas</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>spr_Enemy_Atlas</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); //Flashing,...
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables STATS

animation = 1/8;

image_speed = animation;

// Stats

dirMAX = 4;  // Used to remember dir after Crystal Hold
dir = 4;
hsp = 0;
vsp = 0;


vision = 320;

//up_counter = 0;

//can_run = 1;
//can_throw = 0;

enemy_hp = 1;//25

enemy_dmg = 4;

// Initial State

enemy_state = enemy_states.enemy_idle;

enemy_shield = 0;

// Remember Death in Room

rememberdeath = 0;

// Won't Go off Platform Edges

//edgestop = 1;








</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialized Variables 
{
  canShoot = true;
  global.grav = 0.2;  //set the gravity!
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot and Wall

//WeakSpot = instance_create(x-8,y-8,obj_BTAFatty_WeakSpot);

Wall = instance_create(x,y,obj_Atlas_Wall);
Wall.host = id;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Boulder over Time
if !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,true)
{
    alarm[2] = room_speed*5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Boulder If Idle for 5 secs

if enemy_state = enemy_states.enemy_idle
{
    enemy_state = enemy_states.enemy_down;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// De-Agro

vision = 320;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weak Spot Flips

if instance_exists(Wall)
{
    if image_xscale = 1
    {
        Wall.x = x + 24;
        Wall.y = y - 4;
    }
    else
    {
        Wall.x = x - 24;
        Wall.y = y - 4;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switching States

switch (enemy_state)
{
    
    //// Idle
    case enemy_states.enemy_idle: 
    sprite_index = spr_Enemy_Atlas;
    hsp = 0;
    
    if distance_to_object(obj_Oenn_Body) &lt; vision
    and !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,true)
    {
        enemy_state = enemy_states.enemy_down;
    }
    
    break;
    
    // Punch Ground
    case enemy_states.enemy_down: 
    sprite_index = spr_Enemy_Atlas_CreateBoulder;
    if image_index &gt;= 7 and distance_to_object(obj_Oenn_Body) &lt; 512
    {
        global.shake = 20;
    }
    if image_index = 6 
    {
        if distance_to_object(obj_Oenn_Body) &lt; 512
        {
            audio_play_sound(snd_CreateBoulder,10,0);
        }
        if image_xscale &gt; 0
        {
            wall = instance_create(x-64,y,obj_Atlas_Wall);
            wall.host = id;
        }
        if image_xscale &lt; 0
        {
            wall = instance_create(x+64,y,obj_Atlas_Wall);
            wall.host = id;
        }
        // HIT BOX
        if image_xscale = 1
        {
            with instance_create(x-64,y+16,obj_Atlas_GroundPound)
            {
                image_xscale = 1.25;
                image_yscale = 1;
            }
        }
        if image_xscale = -1
        {
            with instance_create(x+64,y+16,obj_Atlas_GroundPound)
            {
                image_xscale = 1.25;
                image_yscale = 1;
            }
        }
    }
    hsp = 0;
    
    break;
    
    /// Waiting with Boudler
    case enemy_states.enemy_blocking: 
    sprite_index = spr_Enemy_Atlas_Waiting;
    hsp = 0;

    if distance_to_object(obj_Oenn_Body) &lt; vision
    {
        enemy_state = enemy_states.enemy_up;
    }
    
    break;
    
    // Pick Up Boulder
    case enemy_states.enemy_up: 
    sprite_index = spr_Enemy_Atlas_PickUpBoulder;
    if image_index = 6
    {
        audio_play_sound(snd_PickUpBoulder,10,0);
    }
    if image_index &gt;= 6
    {
        if instance_exists(wall)
        {
            with wall
            {
                instance_destroy();
            }
        }
    }
    hsp = 0;
    
     break;
    
    // Hold Boulder
    case enemy_states.enemy_charging: 
    sprite_index = spr_Enemy_Atlas_HoldBoulder;
    hsp = 0;
    
    if distance_to_object(obj_Oenn_Body) &lt; vision
    and !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,true)
    and canShoot 
    {
        image_index = 0;
        enemy_state = enemy_states.enemy_shooting;
    }
    
    if place_meeting(x,y,obj_Pulse_Charged)
    {
        enemy_state = enemy_states.enemy_stunned;
    }
    
    break;
    
    // Drop Boulder
    case enemy_states.enemy_stunned: 
    sprite_index = spr_Enemy_Atlas_DropBoulder;
    hsp = 0;
    if image_index = 2
    or image_index = 3
    {
        global.shake = 20;
    }
    
    
    break;
    
    // Throw Boulder
    
    case enemy_states.enemy_shooting: 
    sprite_index = spr_Enemy_Atlas_ThrowBoulder;
    hsp = 0;
    // Sound
    if image_index = 1
    {
        audio_play_sound(snd_AtlasThrow,10,0);
    }
    // Left
    if image_index &gt;= 3 and !instance_exists(obj_boulder) 
    and image_xscale &gt; 0
    //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x-32,y-80,obj_boulder);
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x-32);
        dY = obj_Oenn_Body.y-(y-80);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        canShoot = false;
        alarm[0] = room_speed*1;
      }
    }
    }
    // Right
    if image_index &gt;= 3 and !instance_exists(obj_boulder) 
    and image_xscale &lt; 0
   //and can_throw = 1
    {
        {
      var iii,dX,dY,ang;
      if (canShoot){
        //iii = instance_create(x,y,obj_boulder);
        iii = instance_create(x+32,y-80,obj_boulder);
        iii.image_xscale = -1;
        //dX = mouse_x-x;
        //dY = mouse_y-y;
        dX = obj_Oenn_Body.x-(x+32);
        dY = obj_Oenn_Body.y-(y-80);
        ang = (arctan2(-dY,dX)+degtorad(90))/2;
        if (ang != pi/2){
          iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
          iii.direction = radtodeg(ang);
        }
        else {
          with (iii){
            instance_destroy();
          }
          exit;
        }
        canShoot = false;
        alarm[0] = room_speed*1;
      }
    }
    }
    break;
    
    
    //// Damaged
    case enemy_states.enemy_damaged:
    hsp = 0; 
    sprite_index = spr_Enemy_Atlas;
    
    break;
    
    //// Death
    case enemy_states.enemy_death:
    cb_slashed = 0; 
    if sprite_index != spr_Enemy_Atlas_Death
    {
    image_index = 0
    sprite_index = spr_Enemy_Atlas_Death;
    }
    hsp = 0; 
    
    if image_index = 0
    {
        audio_play_sound(snd_Atlas_Death,10,0);
    }
    
    break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Flip

if enemy_state != enemy_states.enemy_down
and enemy_state != enemy_states.enemy_up
and enemy_state != enemy_states.enemy_stunned
and enemy_state != enemy_states.enemy_death
{
    if x &lt; obj_Oenn_Body.x
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Throw Boulder
/*
if distance_to_object(obj_Oenn_Body) &lt; 128 
and !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,true)
{
  var iii,dX,dY,ang;
  if (canShoot){
    iii = instance_create(x,y,obj_boulder);
    //dX = mouse_x-x;
    //dY = mouse_y-y;
    dX = obj_Oenn_Body.x-x;
    dY = obj_Oenn_Body.y-y;
    ang = (arctan2(-dY,dX)+degtorad(90))/2;
    if (ang != pi/2){
      iii.speed = dX/(cos(ang)*sqrt(2*(dY+tan(ang)*dX)/global.grav));
      iii.direction = radtodeg(ang);
    }
    else {
      with (iii){
        instance_destroy();
      }
      exit;
    }
    canShoot = false;
    alarm[0] = room_speed*5;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if enemy_hp &lt;= 0
and (enemy_state = enemy_states.enemy_idle
or enemy_state = enemy_states.enemy_down
or enemy_state = enemy_states.enemy_up
or enemy_state = enemy_states.enemy_shooting)
{
    enemy_state = enemy_states.enemy_death;
    with Wall
    {
        instance_destroy();
    }
}

if enemy_hp &lt;= 0
and enemy_state = enemy_states.enemy_charging
{
    enemy_state = enemy_states.enemy_stunned;   
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions and Gravity

//Gravity

if (vsp &lt; 5) vsp += grav;


//Horizontal Collision

if (place_meeting((x+hsp),(y),par_wall))
{
    while(!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Horizontal Collision with Crystal Wall

if (place_meeting((x+hsp),(y),obj_Crystal_Wall))
{
    while round(!place_meeting((x+sign(hsp)),(y),obj_Crystal_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Floor

if (place_meeting((x),round(y+vsp),par_wall))
{
    while(!place_meeting((x),(y+sign(vsp)),par_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 
    and ((!position_meeting(x+((sprite_width/8)*sign(-dir)), y+(sprite_height/4)+32,par_wall))
    and (!position_meeting(x+((sprite_width/8)*sign(-dir)), y+(sprite_height/4)+16,par_wall)))
    //and COV.on = 0  // COV will still work on edge
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*.5;
    }
     if (edgestop = 1) and hsp &lt; 0 
     and ((!position_meeting(x+((sprite_width/8)*sign(dir)), y+(sprite_height/4)+32,par_wall)) 
     and (!position_meeting(x+((sprite_width/8)*sign(dir)), y+(sprite_height/4)+16,par_wall))) 
     //and COV.on = 0
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*.5;
    }
}


//Vertical Collision Platforms
/*
if (place_meeting((x),round(y+vsp),obj_Ghost_Platform))
{
    while(!place_meeting((x),(y+sign(vsp)),obj_Ghost_Platform))
    {
        y += sign(vsp);
    }
    vsp = 0;
    if (edgestop = 1) and hsp &gt; 0 and !position_meeting(x+((sprite_width/4)*sign(-dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*2;
    }
     if (edgestop = 1) and hsp &lt; 0 and !position_meeting(x+((sprite_width/4)*sign(dir)), y+(sprite_height/4)+16,obj_Ghost_Platform)
    {
        enemy_state = enemy_states.enemy_idle;
        can_run = 0;
        alarm[2] = room_speed*2;
    }
}
*/
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cant Be Damaged

if enemy_state = enemy_states.enemy_blocking
or (enemy_state = enemy_states.enemy_up and image_index &lt; 6)
{
    enemy_shield = 1;
}
else
{
    enemy_shield = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remember Death In Room

// Intro Stage
if global.DeadEnemies[0] = 1
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After Slow mo return to normal animation speed
/*
if global.slowmo = 1 //and global.freeze_all = 0 
{
    image_index = round(image_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Pulse">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agro 

vision = 512;

alarm[1] = room_speed*3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Pulse_Charged">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agro 

vision = 512;

alarm[1] = room_speed*3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition to States

// Pick Up Boulder

if sprite_index = spr_Enemy_Atlas_CreateBoulder
and distance_to_object(obj_Oenn_Body) &lt; vision
{
    image_index = 0;
    enemy_state = enemy_states.enemy_up;
}

// Wait with Boulder Wall

if sprite_index = spr_Enemy_Atlas_CreateBoulder
and distance_to_object(obj_Oenn_Body) &gt; vision
{
    image_index = 0;
    enemy_state = enemy_states.enemy_blocking;
}

// Holding Boulder

if sprite_index = spr_Enemy_Atlas_PickUpBoulder
{
    enemy_state = enemy_states.enemy_charging;
}

// Can Throw Boulder

if sprite_index = spr_Enemy_Atlas_HoldBoulder
{
    can_throw = 1;
}

// Throw Boulder to Idle

if sprite_index = spr_Enemy_Atlas_ThrowBoulder
{
    can_throw = 0;
    enemy_state = enemy_states.enemy_idle;
}

// Stunned Drop

if sprite_index = spr_Enemy_Atlas_DropBoulder
{ 
    instance_create(x,y,obj_Enemy_DeathSmoke);
    audio_play_sound(snd_Enemy_Death,10,0);
    instance_create(x,y,obj_Shard_Small);
    if random(100) &lt; 50 then  // Chances for Health
    {
        instance_create(x,y,obj_Health_Small);
    }
    instance_destroy();
}

// Death

if sprite_index = spr_Enemy_Atlas_Death
{ 
    instance_create(x,y,obj_Enemy_DeathSmoke);
    audio_play_sound(snd_Enemy_Death,10,0);
    instance_create(x,y,obj_Shard_Small);
    if random(100) &lt; 80 then  // Chances for Health
    {
        instance_create(x,y,obj_Health_Small);
    }
    /////////////// Remember If Dead in Room
    // Intro Stage
    if room = room_IntroStage_1 
    and rememberdeath = 1
    {
        global.DeadEnemies[0] = 1;
    }
    
    // Destroy
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event Inherit

event_inherited(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
