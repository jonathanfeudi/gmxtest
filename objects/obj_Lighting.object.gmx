<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables and Surface

// Create surface the size of the room

lightsurf = surface_create(view_wview[0]+50,view_hview[0]+50);

surface_set_target(lightsurf);
draw_clear_alpha(c_black,0);

// Reset to application surface

surface_reset_target();

// Black Overlays Alpha

sunon = 0;

blackalpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
/*
if (surface_exists(lightsurf))
{
    surface_set_target(lightsurf);
    
    // Set the Dark Overlay
    draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(0,0,room_width,room_height,false);
    
    // Set Circles
    draw_set_blend_mode(bm_subtract);
    
    // Draw 3 Circles /// DRAW EVENT???

    draw_set_colour(c_black);
    draw_set_alpha(0.2);
    
    with (obj_Camera)
    {
        draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 410 + random_range(0,2),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 480 + random_range(-1,1),false);
    }
    
    // Draw 2 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(0.45);
    
    with (obj_Camera)
    {
        draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 370 + random_range(-1,1),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 360 + random_range(-1,1),false);
    }
    
    // Draw 1 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(1);
    
    with (obj_Camera)
    {
        draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 260 + random_range(0,1),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 280 + random_range(-1,1),false);
    }
    
    
    
    // Reset all of the set Draws
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
    surface_reset_target();  
}
else
{
    lightsurf = surface_create(view_wview[0]+50,view_hview[0]+50);
    surface_set_target(lightsurf);
    draw_clear_alpha(c_black,0);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Light Surface
/*
if (surface_exists(lightsurf))
{
    surface_set_target(lightsurf);
    
    // Set the Dark Overlay
    draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(0,0,room_width,room_height,false);
    
    // Set Circles
    draw_set_blend_mode(bm_subtract);
    
    // Draw 3 Circles /// DRAW EVENT???

    draw_set_colour(c_black);
    draw_set_alpha(0.2);
    
    with (obj_Camera)
    {
        draw_circle(view_xview[0]-x, view_yview[0]-y, 410 + random_range(-1,2),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 480 + random_range(-1,1),false);
    }
    
    // Draw 2 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(0.45);
    
    with (obj_Camera)
    {
        draw_circle(view_xview[0]-x, view_yview[0]-y, 370 + random_range(-1,1),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 360 + random_range(-1,1),false);
    }
    
    // Draw 1 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(1);
    
    with (obj_Camera)
    {
        draw_circle(view_xview[0]-x, view_yview[0]-y, 280 + random_range(0,1),false);
        //draw_circle(x + random_range(-1,1), y + random_range(-1,1), 280 + random_range(-1,1),false);
    }
    
    
    
    // Reset all of the set Draws
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
    surface_reset_target();  
}
else
{
    lightsurf = surface_create(room_width,room_height);
    surface_set_target(lightsurf);
    draw_clear_alpha(c_black,0);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lighter or Darker

if sunon = 1 and blackalpha &lt;= 1
{
    blackalpha -= .010;
}

if sunon = 0 and blackalpha &gt;= 1
{
    blackalpha += .010;
}

// Cap Transparancyi


if blackalpha &gt;= 1
{
   blackalpha = 1;
}

if blackalpha &lt;= 0
{
    if (surface_exists(lightsurf))
    {
        surface_free(lightsurf);
    }
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Surface

if (surface_exists(lightsurf))
{
    surface_free(lightsurf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

if (surface_exists(lightsurf))
{
    surface_set_target(lightsurf);
    
    // Set the Dark Overlay
    draw_set_colour(c_black);
    draw_set_alpha(blackalpha);
    draw_rectangle(0,0,room_width,room_height,false);
    
    // Set Circles
    draw_set_blend_mode(bm_subtract);
    
    // Draw 3 Circles /// DRAW EVENT???

    draw_set_colour(c_black);
    draw_set_alpha(0.2);
    
    with (par_Light)
    {
        draw_circle_part(x-view_xview[0]+25,y-view_yview[0]+25,250+ random_range(0,2),0,180,c_white,c_white,.2,.2)
        //draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 370 + random_range(0,2),false);
    }
    
    // Draw 2 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(0.45);
    
    with (par_Light)
    {
        draw_circle_part(x-view_xview[0]+25,y-view_yview[0]+25,120+ random_range(-1,1),0,180,c_white,c_white,.65,.7)
        //draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 260 + random_range(-1,1),false);
    }
    
    // Draw 1 Circles /// DRAW EVENT???
    
    draw_set_colour(c_white);
    draw_set_alpha(1);
    
    with (par_Light)
    {
        draw_circle_part(x-view_xview[0]+25,y-view_yview[0]+25,75 + random_range(0,1),0,180,c_white,c_white,.8,.75)
        //draw_circle(x-view_xview[0]+25, y-view_yview[0]+25, 130 + random_range(0,1),false);
    }
    
    
    
    // Reset all of the set Draws
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(blackalpha);//1
    surface_reset_target();  
}
else
{
    lightsurf = surface_create(room_width,room_height);
    surface_set_target(lightsurf);
    draw_clear_alpha(c_black,0);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Surface

if (!surface_exists(lightsurf))
{
    lightsurf = surface_create(view_xview[0]-25,view_yview[0]-25);
}
else
{
    if (view_current == 0)
    {
        draw_surface(lightsurf,view_xview[0]-25,view_yview[0]-25);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
