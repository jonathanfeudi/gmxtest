<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event inherit

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

h_move = gamepad_axis_value(global.cp, gp_axislh);  // Defining variable h_move as horizontal input from left stick
v_move = gamepad_axis_value(global.cp, gp_axislv);  // This one is vertical movement from left stick


Key_Left    =   -(gamepad_button_check(global.cp,gp_padl) or keyboard_check(vk_left) or h_move &lt; -0.5);
Key_Right   =   gamepad_button_check(global.cp,gp_padr) or keyboard_check(vk_right) or h_move &gt; 0.5;


//Gravity

if global.slowmo = 1
{
    if (vsp &lt; 5) vsp += grav;
}
if global.slowmo = 2
{
    if (vsp &lt; 5) vsp += grav/4;
}

// Collisions

//Horizontal Collision Wall

if (place_meeting((x+hsp),(y),par_wall))
{
    while (!place_meeting((x+sign(hsp)),(y),par_wall))
    {
        x += sign(hsp);
    }
    
    hsp = 0;
}

//Horizontal Collision Enemies

if (place_meeting((x+hsp),(y),par_Enemy))
{
    while (!place_meeting((x+sign(hsp)),(y),par_Enemy))
    {
        x += sign(hsp);
    }
    
    hsp = 0;
}

x += floor(hsp);


//Vertical Collision Walls

if (place_meeting((x),ceil(y+vsp),par_wall))
{
    while (!place_meeting((x),ceil(y+sign(vsp)),par_wall))
    {
        y += ceil(sign(vsp));
    }
    vsp = 0;
}

//Vertical Collision PLATFORMs

if (place_meeting((x),(y+vsp),obj_Ghost_Platform))
{
    while (!place_meeting((x),(y+sign(vsp)),obj_Ghost_Platform))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += ceil(vsp);


//PUSH
if  x &gt; obj_Oenn_Body.x and obj_Oenn_Body.state = states.pushing 
and distance_to_object(obj_Oenn_Body) &lt; 8 and Key_Right
and !place_meeting(x+1,y,par_Enemy)
{
    hsp = 1;
}


if x &lt; obj_Oenn_Body.x and obj_Oenn_Body.state = states.pushing
and distance_to_object(obj_Oenn_Body) &lt; 8 and -Key_Left
and !place_meeting(x-1,y,par_Enemy)
{
    hsp = -1;
}

// PULL

if  x &gt; obj_Oenn_Body.x and obj_Oenn_Body.state = states.pulling 
and distance_to_object(obj_Oenn_Body) &lt; 13 and -Key_Left and obj_Oenn_Body.hsp != 0
and !place_meeting(x+1,y,par_Enemy)
{
    hsp = -1;
}

if x &lt; obj_Oenn_Body.x and obj_Oenn_Body.state = states.pulling
and distance_to_object(obj_Oenn_Body) &lt; 13 and Key_Right and obj_Oenn_Body.hsp != 0
and !place_meeting(x-1,y,par_Enemy)
{
    hsp = 1;
}

if obj_Oenn_Body.state = states.pulling and !Key_Right and !-Key_Left
{
    hsp = 0;
}

if obj_Oenn_Body.state = states.pulling and Key_Right and -Key_Left
{
    hsp = 0;
}

// Falling and Cant Be Pushed

if obj_Oenn_Body.state != states.pushing 
and obj_Oenn_Body.state != states.pulling 
or (!place_meeting(x,y+1,par_wall) and !place_meeting(x,y+1,par_Platform))
{
    hsp = 0;
}

if vsp &gt; 0
{
    obj_Oenn_Body.pushable = 0;
}
else
{
    obj_Oenn_Body.pushable = 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Dust

// Pushing
if obj_Oenn_Body.state = states.pushing and x &gt; obj_Oenn_Body.x
and obj_Oenn_Body.image_index = 4
{
{
     audio_play_sound(snd_Block_Moving,10,0);
}
if !instance_exists(obj_Oenn_Dust)
and (place_meeting(x+2,y,obj_Oenn_Body) or place_meeting(x-2,y,obj_Oenn_Body))
and (place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform))
{
   
    instance_create(bbox_left,bbox_bottom-16,obj_Oenn_Dust);
}
}


if obj_Oenn_Body.state = states.pushing and x &lt; obj_Oenn_Body.x
and obj_Oenn_Body.image_index = 4
{
{
    audio_play_sound(snd_Block_Moving,10,0);
}
if !instance_exists(obj_Oenn_Dust)
and (place_meeting(x+2,y,obj_Oenn_Body) or place_meeting(x-2,y,obj_Oenn_Body))
and (place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform))
{
    
    instance_create(bbox_right,bbox_bottom-16,obj_Oenn_Dust);
}
}

// Pulling
if obj_Oenn_Body.state = states.pulling and x &lt; obj_Oenn_Body.x
and obj_Oenn_Body.image_index = 7
{
{
    audio_play_sound(snd_Block_Moving,10,0);
}
if !instance_exists(obj_Oenn_Dust)
and (place_meeting(x+2,y,obj_Oenn_Body) or place_meeting(x-2,y,obj_Oenn_Body))
and (place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform))
{
    
    instance_create(bbox_right,bbox_bottom-16,obj_Oenn_Dust);
}
}

if obj_Oenn_Body.state = states.pulling and x &gt; obj_Oenn_Body.x
and obj_Oenn_Body.image_index = 7
{
{
    audio_play_sound(snd_Block_Moving,10,0);
}
if !instance_exists(obj_Oenn_Dust)
and (place_meeting(x+2,y,obj_Oenn_Body) or place_meeting(x-2,y,obj_Oenn_Body))
and (place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform))
{
    
    instance_create(bbox_left,bbox_bottom-16,obj_Oenn_Dust);
}
}

// Falling Dust

if (place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform))
and floor(yprevious) &lt; floor(y)
{
    audio_play_sound(snd_Block_Landing,10,0);
    with instance_create(bbox_left,bbox_bottom-16,obj_Oenn_Dust)
    {
        direction = 180;
        speed = 2;
        image_xscale = 1
    }
    with instance_create(bbox_right,bbox_bottom-16,obj_Oenn_Dust)
    {
        direction = 0;
        speed = 2;
        image_xscale = -1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Platform

//y -= 1;

// y += 1 can make a cool stuck in mud effect

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
