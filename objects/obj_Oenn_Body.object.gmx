<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Oenn_RoomPlacing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>par_Oenn</parentName>
  <maskName>spr_Oenn_Collision_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//scr_Inputs();

// Initial State

state = states.enter;

enterdust = 1;

enterfirst = 0;

///////////////////////////////////////// Object Parameters

grav = .4;  //How fast player falls

hsp = 0;    // Initial Horizontal Speed
hsp_carry = 0;  // Moving Platforms
vsp = 0;    // Initial Vertical Speed
vsp_carry = 0;

jumpspeed = 7;  // jumping Height .. NEED TO ALSO CHANGE LUCID TIME JUMP HEIGHT  has else statement
grounded = 0;   // If in contact with obj_floor
platformed = 0; // if on a platform

jumps = 0;

ang = 0

movespeed = 3;  // Base movement speed

runspeed = 5;   // Running Speed

pushable = 1;   // Can Push Blocks

can_activate = 0;  // Interacting with objects

can_save = 0;  // Can Save

can_move = 1;  // Can Move

can_run = 1;

fallstopamount = 0;
runstopamount = 0;
//stopfall = 0;

leaves = 1;

////////////////
// CUT SCENES //
///////////////

cs_run = 0;

cs_walk = 0;

cs_jump = 0;

///////////////////////////////////////// Oenn Stats

// Health Variables

cbd = 0;

// Burning

burn = 0;

// Stamina Variables

stamina_recovery = 1; // Allows Stamina to Regen

stamcharge_window = 0;

can_stamcharge = 1;

// Dash Variables

dash_windowL = 0;

dash_windowR = 0;

can_dashL = 1;

can_dashR = 1;

///////////////////////////////////////// Object Variables

// Shooting

diagshot = 1;

can_shoot = 1;

charging = 0;

charged = 0;

pulsespeed = 9; //8

arm_out = 0;

sloped = 0;

//chargestage = 0;

// Slashing

can_slash = 1;

slash_button_pressed = 1;

slash_combo = 1;

// Fighting Stance

fightingstance = 0;

fightingstancesprite = 0;

// Idle Animations

idle_toolong = 0;

idle_choose = 1;

// Skills

cch = 1;  // Crystal Hold

ccw = 1;  // Crystal Wall
cw_count = 0;

cca = 1;  // Crystal Armor

cco = 1;  // Crystal Orb

clt = 1;  // Lucid Teleport // Lucid Time
cpb = 1;  // Can Phase Back..damage stuff

///////////////////////////////////////// Oenn Pick Ups

// Shards
/*
plusshardsmax = 0;

plusshards = 0;
*/
// Stamina Tanks

stamtank = 0;

// Room Transition

doorx = 0;

doory = 0;

roomto = 0;

doorgoleft = 0;

doorgoright = 0;

//Sprite Variables

animation = 1/4;

image_speed = animation;  

//image_xscale = 2;

image_yscale = 1;//2 smaller sprites// larger now

can_flip = 1;
Flip = 1;   //Flipping sprite left or right

blend = 0;

// Text Box Interation

global.text_local_player = obj_Oenn_Body.id;

// Start x and y Coordinates

outside = 0;

pitfall = 0;

global.pit_x = x;

global.pit_y = y;


/// Same Platform as enemy

thefloor = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a variable that the text engine will use to lock the player
//The text engine will set lock to true. We will not move when lock is true
lock = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash White

flash = shader_get_uniform(sh_flash, "f_colour");
flash_timer = 0;
flash_duration = room_speed * 0.25; // 0.25 seconds
flash_r = 1;  // Colour of your flash. Values on 0-1 range.
flash_g = 1;  // All colours set on 1 would make it white
flash_b = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
if instance_exists(obj_Camera_Point)
{
    CAM = instance_create(obj_Camera_Point.x,obj_Camera_Point.y,obj_Camera);
}
else
{    
    CAM = instance_create(x,y,obj_Camera);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Charge On

global.CrystalCharge = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vignette Object Create

instance_create(x,y,obj_vignette_noise);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Teleportion Explode and Reset Variables

flash_timer = flash_duration;
audio_play_sound(snd_Charged,10,0);
audio_play_sound(snd_Charged_Lo,10,0);
part_particles_create(global.particle_system, x, y, global.pt_Oenn_Charged, 15);

/// Can Be Damaged

cbd = 0;
cpb = 1;
image_alpha = 1;
if !instance_exists(obj_Crystal_Armor)
{
    image_blend = -1;
}
blend = 0;

// Damage Aura
if instance_exists(obj_Oenn_TeleportParticles)
{
    with obj_Oenn_TeleportParticles
    {
        part_emitter_destroy(global.charge_aura,LucidAura);
        instance_destroy();
    }
}

if global.LucidTeleport_A = 1
{ 
    instance_create(x,y,obj_LucidTeleportAura);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Lucid Time

clt = 1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Lucid Teleport Again

clt = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Crystal Orb

cco = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to Normal Speed

global.slowmo = 1;

with par_Enemy //and global.freeze_all = 0 
{
    image_index = floor(image_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Crystal Armor

cca = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Cystal Hold

cch = 1;

can_CHAOE = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Crystal Wall

ccw = 1;

cw_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recover from Stun

state = states.idle;

animation = 1/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stamina Regeneration Back On

stamina_recovery = 1;
global.Oenn_stamina += 5;
shakestun = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slash Combo NOT NEEDED???

state = states.idle;

slash_combo = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can Slash

can_slash = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Be Damaged

cbd = 0;
//image_alpha = 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Shoot

can_shoot = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Magnet

Key_RTrig   =   gamepad_button_check(global.cp,gp_shoulderrb) or keyboard_check(ord('R'));
Key_RTrigPressed   =   gamepad_button_check_pressed(global.cp,gp_shoulderrb) or keyboard_check_pressed(ord('R'));
Key_RTrigRelease   =   gamepad_button_check_released(global.cp,gp_shoulderrb) or keyboard_check_released(ord('R'));

Key_JumpPressed    =   gamepad_button_check_pressed(global.cp,gp_face1) or keyboard_check_pressed(vk_space);


if global.CrystalMagnet = 1
and instance_exists(obj_Crystal_Magnet_Floor)
and !Key_JumpPressed
and !collision_line(x,y,obj_Crystal_Magnet_Floor.x,obj_Crystal_Magnet_Floor.y,par_wall,false,false)
{
    if Key_RTrig and distance_to_object(obj_Crystal_Magnet_Floor) &lt; 20
    and distance_to_object(obj_Crystal_Magnet_Floor) &gt; 5
    and !place_meeting(x,y+1,par_wall)
    and !instance_exists(obj_Hover_Vertical)
    {
        //speed += 1;
        move_towards_point(obj_Crystal_Magnet_Floor.x, obj_Crystal_Magnet_Floor.y,1);
    }
    else
    {
        speed = 0;
    }
    
    CMF = instance_nearest(x,y,obj_Crystal_Magnet_Floor);
    
    if distance_to_object(obj_Crystal_Magnet_Floor) &lt; 10
    and !instance_exists(obj_Hover_Vertical)
    and Key_RTrig
    {
        instance_create(CMF.x,CMF.y,obj_Hover_Vertical);
        speed = 0;
        jumps = global.jumpsmax;
    }   
}

if instance_exists(obj_Hover_Vertical)
{
    //speed += 1;
    move_towards_point(obj_Hover_Vertical.x, obj_Hover_Vertical.y,1);
    var closest, dir;
    closest = instance_nearest(x,y,obj_Crystal_Magnet_Floor);
    dir = point_direction(x, y, closest.x, closest.y);
    
    part_particles_create(global.particle_system, x, y, global.pt_CrystalMagnetFloor, 5);
    
    part_type_direction(global.pt_CrystalMagnetFloor,dir,dir,0,0);
    if distance_to_object(obj_Hover_Vertical) &lt; 4
    {
        y =  obj_Hover_Vertical.y;
        part_particles_create(global.particle_system,x,y,global.pt_CrystalMagnetOenn,2);
   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switching States

switch (state)
{
    // Movement
    case states.idle: scr_Oenn_Idle(); break;
    case states.walking: scr_Oenn_Walking(); break;
    case states.running: scr_Oenn_Running(); break;
    case states.stopping: scr_Oenn_Stopping(); break;
    case states.pushing: scr_Oenn_Pushing(); break;
    case states.pulling: scr_Oenn_Pulling(); break;
    case states.jumping: scr_Oenn_Jumping(); break;
    case states.falling: scr_Oenn_Falling(); break;
    case states.fallingstop: scr_Oenn_Falling_Stop(); break;
    // Touching
    case states.touching: scr_Oenn_Touching(); break;
    // Talking
    case states.talking: scr_Oenn_Talking(); break;
    // Blocking
    case states.blocking: scr_Oenn_Blocking(); break;
    case states.blockingend: scr_Oenn_Blocking_End(); break;
    case states.blockingbreak: scr_Oenn_Blocking_Break(); break;
    case states.stunned: scr_Oenn_Stunned(); break;
    // Shooting
    case states.charging: scr_Oenn_Charging(); break;
    case states.charging2: scr_Oenn_Charging2(); break;
    case states.charged: scr_Oenn_Charged(); break;
    case states.shooting_idle: scr_Oenn_Shooting_Idle(); break;
    case states.shooting_walking: scr_Oenn_Shooting_Walking(); break;
    case states.shooting_running: scr_Oenn_Shooting_Running(); break;
    case states.shooting_jumping: scr_Oenn_Shooting_Jumping(); break;
    case states.shooting_charged: scr_Oenn_ChargeShot(); break;
    // Slashing
    case states.slashing_idle: scr_Oenn_Slashing_Idle(); break;
    case states.slashing_combo: scr_Oenn_Slashing_Combo(); break;
    case states.slashing_walking: scr_Oenn_Slashing_Walking(); break;
    case states.slashing_running: scr_Oenn_Slashing_Running(); break;
    case states.slashing_jumping: scr_Oenn_Slashing_Jumping(); break;
    // Dashing
    case states.dashingleft: scr_Oenn_DashingL(); break;
    case states.dashingright: scr_Oenn_DashingR(); break;
    case states.dashready: scr_Oenn_DashReady(); break;
    // Skills
    case states.skill_crystal_wall: scr_Oenn_Crystal_Wall(); break;
    // Damaged
    case states.damaged: scr_Oenn_Damaged(); break;
    // Death
    case states.death: scr_Oenn_Death(); break;
    // ENTERING GAME
    case states.enter: scr_Oenn_ENTER(); break;
    // Leaving ROOM
    case states.leavingroom: scr_Oenn_Leaving(); break;
    // Enter ROOM
    case states.enterroom: scr_Oenn_Entering_Room(); break;
    // NO GRAV
    case states.nograv: scr_Oenn_NoGrav(); break;
    // Cut Scene
    case states.cutscene: scr_Oenn_CutScene(); break;
    // Stamina Charge
    case states.stam_charge: scr_Oenn_Stam_Charge(); break;
    // Pit Respawn
    case states.pitspawn: scr_Oenn_Pit(); break;
    // Saving
    case states.saving: scr_Oenn_Saving(); break;
    case states.saving_done: scr_Oenn_Saving_Done(); break;
    // Sitting
    case states.sitting: scr_Oenn_Sitting(); break;
    // Standing Up
    case states.standingup: scr_Oenn_StandingUp(); break;
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Mask
if sprite_index = spr_Oenn_Crouch
or sprite_index = spr_Oenn_Crouch_Shot
or sprite_index = spr_Oenn_Crouch_Slash
{
    mask_index = spr_Oenn_Collision_Mask_Crouch;
}
else
{
    mask_index = spr_Oenn_Collision_Mask;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Flip
if can_move = 1
{
if !Key_B and state != states.pulling and state != states.enter// Conditions
and state != states.dashready 
and state != states.dashingright
and state != states.dashingleft
and state != states.leavingroom
and state != states.enterroom
and state != states.cutscene
and state != states.pulling
and state != states.pushing //
and can_flip = 1
and lock = 0
{
    if Key_Right 
    {
        Flip = 1;
    }
    
    if Key_Left = -1
    {
        Flip = 0;
    }
}

if Flip = 1
{
    image_xscale = 1;//2
}
if Flip = 0
{
    image_xscale = -1;//2
}
/// CAN FLIP
/*
if state = states.falling
{
    if place_meeting(x,y+32,par_wall)
    or place_meeting(x,y+32,par_Platform)
    or place_meeting(x,y+32,obj_Crystal_Wall)
    {
        can_flip = 0;
    }
}
else
{
    can_flip = 1;
}*/
/*
if Key_BPressed
{
    can_flip = 0;
}
if Key_BRelease
{
    can_flip = 1;
}
*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Index Follows Legs Image Index

image_index = obj_Oenn_Legs.image_index;

/*if state != states.slashing_combo
{
image_index = obj_Oenn_Legs.image_index;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Diagnal Aiming Variable

if Key_Up
{
    diagshot = 1;
}

if Key_Down
{
    diagshot = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grounded

if place_meeting(x,y+1,par_wall)
{
    grounded = 1;
}
else
{
    grounded = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platformed

if place_meeting(x,y+1,par_Platform)
{
    platformed = 1;
}
else
{
    platformed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sloped if on slope

if place_meeting(x,y+16,obj_slope)
{   
    sloped = 1;
}
else
{
    slope = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pulses

Key_RBump   =   gamepad_button_check(global.cp,gp_shoulderr) or keyboard_check(ord('E'));

/// Rapid Pulse Button

if Key_ShotRelease
{
    alarm[0] = 1;
    //can_shoot = 1;
}

var pulse_dmg

//1
if global.pulse1 = 1
{
    pulse_dmg = .5;
}
//2
if global.pulse2 = 1
{
    pulse_dmg = 1;
}
//3
if global.pulse3 = 1
{
    pulse_dmg = 2;
}

if can_shoot = 1 //and global.Oenn_stamina &gt; 0
and charged = 0 
and state != states.shooting_charged
and !Key_RBump
{
    // Straight Shots
    
    if (sprite_index = spr_Oenn_Idle_Shot 
    or sprite_index = spr_Oenn_Walking_Shot 
    or sprite_index = spr_Oenn_Running_Shot
    or sprite_index = spr_Oenn_Jumping_Shot
    or sprite_index = spr_Oenn_Low_Health_Shot)
    and arm_out &gt; 24 
    {
        if image_xscale = 1//2
        {
            with (instance_create(x+18, y-4,obj_Pulse_Small)) //Bullet creation
                            {
                            right = 1;
                            dmg = pulse_dmg;
                            speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                            direction = 0;  //Bullet Direction
                            //direction = other.image_angle;
                            image_angle = direction; //Bullet image angle rotation
                            }
        }
        if image_xscale = -1 //2
        {
            with (instance_create(x-18, y-4,obj_Pulse_Small)) //Bullet creation
                        {
                        left = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 180;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
        can_shoot = 0;
        alarm[0] = 16;
    }
    
    // Diag Up Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotDiagUp 
    or sprite_index = spr_Oenn_Walking_Shot_DiagUp 
    or sprite_index = spr_Oenn_Running_Shot_DiagUp
    or sprite_index = spr_Oenn_Jumping_ShotDiagUp
    or sprite_index = spr_Oenn_Low_Health_ShotUpDiag)
    and Key_Shot
    {
        if image_xscale = 1
        {
        with (instance_create(x+14, y-10,obj_Pulse_Small)) //Bullet creation
                        {
                        right = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 45;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
        if image_xscale = -1
        {
        with (instance_create(x-14, y-10,obj_Pulse_Small)) //Bullet creation
                        {
                        left = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 135;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
        can_shoot = 0;
        alarm[0] = 16;
    }
    // Diag Down Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotDiagDown 
    or sprite_index = spr_Oenn_Walking_Shot_DiagDown 
    or sprite_index = spr_Oenn_Running_Shot_DiagDown
    or sprite_index = spr_Oenn_Jumping_ShotDiagDown
    or sprite_index = spr_Oenn_Low_Health_ShotDownDiag)
    and Key_Shot
    {
        if image_xscale = 1
        {                 
            with (instance_create(x+14, y+5,obj_Pulse_Small)) //Bullet creation
                            {
                            right = 1;
                            dmg = pulse_dmg;
                            speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                            direction = 315;  //Bullet Direction
                            //direction = other.image_angle;
                            image_angle = direction; //Bullet image angle rotation
                            }
        }
        if image_xscale = -1
        {
           with (instance_create(x-14, y+5,obj_Pulse_Small)) //Bullet creation
                        {
                        left = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 225;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
    can_shoot = 0;
    alarm[0] = 16;
    }
    
    // Up Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotUp 
    or sprite_index = spr_Oenn_Jumping_ShotUp
    or sprite_index = spr_Oenn_Low_Health_Shot_Up)
    and arm_out &gt; 24 
    {
        if image_xscale = 1
        {
             with (instance_create(x+7, y-16,obj_Pulse_Small)) //Bullet creation
                    {
                    right = 1;
                    dmg = pulse_dmg;
                    speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                    direction = 90;  //Bullet Direction
                    //direction = other.image_angle;
                    image_angle = direction; //Bullet image angle rotation
                    }
        }
        if image_xscale = -1
        {
            with (instance_create(x-7, y-16,obj_Pulse_Small)) //Bullet creation
                    {
                    left = 1;
                    dmg = pulse_dmg;
                    speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                    direction = 90;  //Bullet Direction
                    //direction = other.image_angle;
                    image_angle = direction; //Bullet image angle rotation
                    }
        }    
    can_shoot = 0;
    alarm[0] = 16;
    }   
    
    // Crouch Shots
    
    if (sprite_index = spr_Oenn_Crouch_Shot)
    and arm_out &gt; 24 
    {
        if image_xscale = 1
        {
            with (instance_create(x+14, y+6,obj_Pulse_Small)) //Bullet creation
                        {
                        right = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 0;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
        if image_xscale = -1
        {
           with (instance_create(x-14, y+6,obj_Pulse_Small)) //Bullet creation
                        {
                        left = 1;
                        dmg = pulse_dmg;
                        speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                        direction = 180;  //Bullet Direction
                        //direction = other.image_angle;
                        image_angle = direction; //Bullet image angle rotation
                        }
        }
        can_shoot = 0;
        alarm[0] = 16;
    }
    
    // Jumping Down Shot
    
    if (sprite_index = spr_Oenn_Jumping_ShotDown)
    {
        if image_xscale = 1
        {
            with (instance_create(x+9, y+8,obj_Pulse_Small)) //Bullet creation
                    {
                    right = 1;
                    dmg = pulse_dmg;
                    speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                    direction = 270;  //Bullet Direction
                    //direction = other.image_angle;
                    image_angle = direction; //Bullet image angle rotation
                    }
        }
        if image_xscale = -1
        {
            with (instance_create(x-9, y+8,obj_Pulse_Small)) //Bullet creation
                    {
                    left = 1;
                    dmg = pulse_dmg;
                    speed = (pulsespeed/global.enemy_slowmo); //Bullet Speed
                    direction = 270;  //Bullet Direction
                    //direction = other.image_angle;
                    image_angle = direction; //Bullet image angle rotation
                    }
        }    
    can_shoot = 0;
    alarm[0] = 16;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Charging

//Key_RTrig   =   gamepad_button_check(global.cp,gp_shoulderrb) or keyboard_check(ord('R'));
//Key_RTrigPressed   =   gamepad_button_check_pressed(global.cp,gp_shoulderrb) or keyboard_check_pressed(ord('R'));
//Key_RTrigReleased   =   gamepad_button_check_released(global.cp,gp_shoulderrb) or keyboard_check_released(ord('R'));

Key_LTrig   =   gamepad_button_check(global.cp,gp_shoulderlb) or keyboard_check(ord('Q'));
Key_LTrigPressed   =   gamepad_button_check_pressed(global.cp,gp_shoulderlb) or keyboard_check_pressed(ord('Q'));
Key_LTrigReleased   =   gamepad_button_check_released(global.cp,gp_shoulderlb) or keyboard_check_released(ord('Q'));


if state != states.talking
and state != states.blocking
and state != states.blockingend
and state != states.stunned
and state != states.skill_crystal_wall
and state != states.damaged
and state != states.death
and state != states.enter
and state != states.leavingroom
and state != states.enterroom
and state != states.cutscene
and state != states.stam_charge
and state != states.pitspawn
and state != states.saving
and state != states.saving_done
and state != states.sitting
and state != states.standingup
and state != states.shooting_charged
and state != states.shooting_idle
and state != states.shooting_walking
and state != states.shooting_running
and state != states.shooting_jumping
/*
and state != states.shooting_idle
and state != states.shooting_walking
and state != states.shooting_running
and state != states.shooting_jumping
*/

and global.Oenn_stamina &gt; 0
{
// Make Auras /// Flashing
if can_move = 1
{
    if global.CrystalCharge = 1  
    and Key_LTrig
    and !Key_Shot
    {
        if state = states.idle
        {
            //sprite_index = spr_Oenn_Charging;
            //Stopping Animation Condition 
            fallstopamount = 0;
            runstopamount = 0;
        }
        scr_Flash_Pulse(); /// Flashing
        fightingstance = 160;
        
        with obj_Health_Small
        {
            move_to = 1;
        }
        
        if charged = 0 and !instance_exists(obj_Charging_Aura1)
        {
            instance_create(x,y-16,obj_Charging_Aura1);
            //state = states.charging;
        }
        if charged = 1 and !instance_exists(obj_Charging_Aura2)
        {
            instance_create(x,y-16,obj_Charging_Aura2);
            //state = states.charging2;
        }
    }
    else
    {
    with obj_Health_Small
    {
        move_to = 0;
    }
}
}

/////////////////CHARGING 1

// Chargin
if Key_LTrig and charged = 0 and !Key_Shot
{

if charging &lt; 100
{
    charging += 1;
}

if charging &gt;= 100
{
    charged = 1;
    charging = 0;
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Charged, 15);
    global.shake = 35;
    global.flash_pulse = 200;
    audio_play_sound(snd_Charged,10,0);
    audio_stop_sound(snd_Oenn_Shield);
}
}

/////////////CHARGING 2

// Chargin

if Key_LTrig and charged = 1 and !Key_Shot
{
if charging &lt; 75
{
    charging += .85;
}

if charging &gt;= 75
{
    charged = 2;
    //if !instance_exists(obj_ChargeExplosion)
    //{
    //    instance_create(x,y,obj_ChargeExplosion);
    //}
    global.shake = 35;
    global.flash_pulse = 200;
    audio_stop_sound(snd_Oenn_Shield);
    obj_Oenn_Legs.image_index = 0;
    flash_timer = flash_duration;
    audio_play_sound(snd_Charged,10,0);
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Charged2, 15);
    charging = 0;
}
}

// Stop Charging

if Key_LTrigReleased 
{
    if charged = 0
    {
        with par_Charging_Aura
        {
            instance_destroy();
        }
    }
    charging = 0;
    //state = states.idle;
    global.flash_pulse = 200;
    audio_stop_sound(snd_Oenn_Shield);
}

// Play Sound Restart

if charged &lt; 2
and !audio_is_playing(snd_Oenn_Shield)
and Key_LTrig
{
    var sfx = audio_play_sound(snd_Oenn_Shield,10,1);
    audio_sound_pitch(sfx,.8);
}
}


/// MESSED UP CINEMATICS

if lock = 1
{
    //state = states.idle;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If Inside Room

if x &gt; 0 and x &lt; room_width
and y &gt; 0  and y &lt; room_height
{
    outside = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle Too Long Counter and COunter Reset

if idle_toolong = 8 and place_meeting(x,y+1,par_Grounded)
{
    if idle_choose = 1
    {
        sprite_index = spr_Oenn_Idle_AdjustJacket;
    }
    if idle_choose = 2
    {
        sprite_index = spr_Oenn_Idle_Handglow;
    }
}

// Reset

if state != states.idle 
//or sprite_index != spr_Oenn_Idle_AdjustJacket
{
    idle_toolong = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Hold

Key_RBump   =   gamepad_button_check(global.cp,gp_shoulderr) or keyboard_check(ord('E'));

// Upgraded Variables
var A,B;
if global.CrystalHold_A = 1
{
    A = 1;
}
else
{
    A = 0;
}

if global.CrystalHold_B = 1
{
    B = 1;
}
else
{
    B = 0;
}

// Upgraded Variables
var t;
if global.CrystalHold_A = 1
{
    t = 12;
}
else
{
    t = 8;
}

if cch = 1 and global.Oenn_stamina &gt; 0
and Key_RBump and global.CrystalHold = 1
and global.Oenn_stamina &gt; 20
{
    // Straight Shots
    
    if (sprite_index = spr_Oenn_Idle_Shot 
    or sprite_index = spr_Oenn_Walking_Shot 
    or sprite_index = spr_Oenn_Running_Shot
    or sprite_index = spr_Oenn_Jumping_Shot)
    {
        if image_xscale = 1
        {
            with (instance_create(x+14, y-4,obj_Crystal_Hold_Center)) //Bullet creation
                            {
                            can_CHAOE = A;
                            can_Drain = B;
                            speed = (6/global.enemy_slowmo); //Bullet Speed
                            direction = 0;  //Bullet Direction
                            }
        }
        if image_xscale = -1
        {
            with (instance_create(x-14, y-4,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 180;  //Bullet Direction
                        }
        }
        cch = 0;
        alarm[6] = room_speed*t;
    }
    
    // Diag Up Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotDiagUp 
    or sprite_index = spr_Oenn_Walking_Shot_DiagUp 
    or sprite_index = spr_Oenn_Running_Shot_DiagUp
    or sprite_index = spr_Oenn_Jumping_ShotDiagUp)
    and Key_Shot
    {
        if image_xscale = 1
        {
        with (instance_create(x+14, y-10,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 45;  //Bullet Direction
                        }
        }
        if image_xscale = -1
        {
        with (instance_create(x-14, y-10,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 135;  //Bullet Direction
                        }
        }
        cch = 0;
        alarm[6] = room_speed*t;
    }
    // Diag Down Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotDiagDown 
    or sprite_index = spr_Oenn_Walking_Shot_DiagDown 
    or sprite_index = spr_Oenn_Running_Shot_DiagDown
    or sprite_index = spr_Oenn_Jumping_ShotDiagDown)
    and Key_Shot
    {
        if image_xscale = 1
        {                 
            with (instance_create(x+14, y+5,obj_Crystal_Hold_Center)) //Bullet creation
                            {
                            can_CHAOE = A;
                            can_Drain = B;
                            speed = (6/global.enemy_slowmo); //Bullet Speed
                            direction = 315;  //Bullet Direction
                            }
        }
        if image_xscale = -1
        {
           with (instance_create(x-14, y+5,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 225;  //Bullet Direction
                        }
        }
    cch = 0;
    alarm[6] = room_speed*t;
    }
    
    // Up Shots
    
    if (sprite_index = spr_Oenn_Idle_ShotUp 
    or sprite_index = spr_Oenn_Jumping_ShotUp)
    {
        if image_xscale = 1
        {
             with (instance_create(x+7, y-8,obj_Crystal_Hold_Center)) //Bullet creation
                    {
                    can_CHAOE = A;
                    can_Drain = B;
                    speed = (6/global.enemy_slowmo); //Bullet Speed
                    direction = 90;  //Bullet Direction
                    }
        }
        if image_xscale = -1
        {
            with (instance_create(x-7, y-8,obj_Crystal_Hold_Center)) //Bullet creation
                    {
                    can_CHAOE = A;
                    can_Drain = B;
                    speed = (6/global.enemy_slowmo); //Bullet Speed
                    direction = 90;  //Bullet Direction
                    }
        }    
    cch = 0;
    alarm[6] = room_speed*t;
    }   
    
    // Crouch Shots
    
    if (sprite_index = spr_Oenn_Crouch_Shot)
    {
        if image_xscale = 1
        {
            with (instance_create(x+14, y+6,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 0;  //Bullet Direction
                        }
        }
        if image_xscale = -1
        {
           with (instance_create(x-14, y+6,obj_Crystal_Hold_Center)) //Bullet creation
                        {
                        can_CHAOE = A;
                        can_Drain = B;
                        speed = (6/global.enemy_slowmo); //Bullet Speed
                        direction = 180;  //Bullet Direction
                        }
        }
        cch = 0;
        alarm[6] = room_speed*t;
    }
    
    // Jumping Down Shot
    
    if (sprite_index = spr_Oenn_Jumping_ShotDown)
    {
        if image_xscale = 1
        {
            with (instance_create(x+9, y+8,obj_Crystal_Hold_Center)) //Bullet creation
                    {
                    can_CHAOE = A;
                    can_Drain = B;
                    speed = (6/global.enemy_slowmo); //Bullet Speed
                    direction = 270;  //Bullet Direction
                    }
        }
        if image_xscale = -1
        {
            with (instance_create(x-9, y+8,obj_Crystal_Hold_Center)) //Bullet creation
                    {
                    can_CHAOE = A;
                    can_Drain = B;
                    speed = (6/global.enemy_slowmo); //Bullet Speed
                    direction = 270;  //Bullet Direction
                    }
        }    
    cch = 0;
    alarm[6] = room_speed*t;
    }  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Teleport

var t,tt;
if global.LucidTeleport_B = 1
{
    t = 16;
    tt = 20;
}
else
{
    t = 8;
    tt = 12;
}

if global.LucidTeleport = 1
and clt = 1
and global.Oenn_stamina &gt; 100
{
    if Key_RBump and Key_B
    {
        clt = 0;
        cpb = 0;
        audio_play_sound(snd_LucidTeleport_Fade,10,0);
        alarm[11] = room_speed*t;   // Phase back
        alarm[10] = room_speed*tt;  // can LT again
        global.Oenn_stamina -= 100;
        instance_create(x,y,obj_Oenn_TeleportParticles);
    }
}



if cpb = 0
{
    cbd = 1;
    if image_alpha &gt; .25
    {
        image_alpha -= .025;
    }
    
    if blend &lt; 1
    {
        blend += .025;
    }
    
    image_blend = merge_color(c_white,c_aqua,blend)
    //image_blend = c_aqua;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Time

var t;

t = 8;

if global.LucidTime_A = 1
{
    t = 16;
}

if global.LucidTime_B = 1
{
    t = 12;
}
   


if clt = 1
and global.LucidTime = 1
and global.Oenn_stamina &gt; 100
{
    if Key_RBump and Key_B
    {
        global.slowmo = 2;
        clt = 0;
        alarm[10] = room_speed*t;  // Can Lucid Time
        alarm[8] = room_speed*t;  // Return to Normal Speed
        global.Oenn_stamina -= 100;
        if !instance_exists(obj_controller_ripple)
        {
            instance_create(x,y,obj_controller_ripple);
        }
    }
}
/*
if global.slowmo = 2 and !instance_exists(obj_controller_ripple)
{
    instance_create(x,y,obj_controller_ripple);
}*/

if instance_exists(obj_controller_ripple)
{
    movespeed = 4 ;  // Base movement speed
    runspeed = 7;   // Running Speed
    grav = .4;
}
else
{
    movespeed = 3;  
    runspeed = 5; 
    grav = .4;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Time Jump Speed

if global.slowmo = 2
{
    jumpspeed = 9;
}
else
{
    jumpspeed = 7;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Armor

if cca = 1
and global.CrystalArmor = 1
and global.Oenn_stamina &gt; 60
{
    if Key_RBump and Key_Slash
    and !instance_exists(obj_Crystal_Armor)
    {
        instance_create(x,y,obj_Crystal_Armor);
        cca = 0;
        global.Oenn_stamina -= 60;
    }
    alarm[7] = room_speed*90;
}

// Blend Color

if instance_exists(obj_Crystal_Armor) 
{
    if blend &lt; 1
    {
        blend += .025;
    }
    image_blend = merge_color(c_white,c_aqua,blend)
    //image_blend = c_aqua;
}



// Buff defence 

var d;

if global.CrystalArmor_A = 1
{
    d = 1.5;
}
else
{
    d = 1;
}

if instance_exists(obj_Crystal_Armor)
{
    global.shield = 2*d;
}
else
{
    global.shield = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Orbs

if cco = 1
and global.CrystalOrb = 1
and global.Oenn_stamina &gt; 120
and !instance_exists(obj_Crystal_Orb_3)
{
    if Key_RBump and Key_Slash
    {
        orb1 = instance_create(x-20,y-16,obj_Crystal_Orb_1);
        orb2 = instance_create(x,y-32,obj_Crystal_Orb_2);
        orb3 = instance_create(x+20,y-16,obj_Crystal_Orb_3);
        if global.CrystalOrb_A = 1
        {
            orb4 = instance_create(x-16,y+14,obj_Crystal_Orb_4);
            orb5 = instance_create(x+16,y+14,obj_Crystal_Orb_5);
        }
        global.Oenn_stamina -= 120;
        cco = 0;
        alarm[9] = room_speed*30;
        audio_play_sound(snd_Double_Jump_Item,10,0);
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Getting Shards

//Shards

if global.plusshards &lt; global.plusshardsmax
{
    global.plusshards += 1;
}

if global.plusshards &lt; global.plusshardsmax and global.Oenn_shards &lt; global.Oenn_shardsMAX
{
    global.Oenn_shards += 1;
}



if global.plusshards = global.plusshardsmax
{
    global.plusshardsmax = 0;
    global.plusshards = 0;
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Heart Tanks

if global.gotHT = 1
{
    global.Oenn_hp += .25
}

if global.Oenn_hp = global.Oenn_hpMAX
{
   global.gotHT = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stamina Charged!

if stamcharge_window &gt; 0
{
    stamcharge_window -= 1;
}

if global.stamcharge = 1
{
    global.Oenn_stamina += min(global.Oenn_staminaMAX-global.Oenn_stamina,(3))
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Burning

if burn = 1 and !instance_exists(obj_Oenn_Burning)
{
    instance_create(x,y,obj_Oenn_Burning);
}

if burn = 1
{
    scr_Blending(c_white,c_red,.1);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death

if global.Oenn_hp &lt;= 0
{
    state = states.death;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause

if Key_Start
{
    instance_create(view_xview+view_wview/2,view_yview+view_hview/2,obj_pause);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Phase Back When Can Be Damaged

if image_alpha &lt; 1 and cpb = 1
{
    image_alpha += .015;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE GLOBAL X and Y Positions for Saving and Pit Falls

global.x = x;

global.y = y;

/*

if place_meeting(x,y+1,par_wall) or place_meeting(x,y+1,par_Platform) 
{
    global.pit_x = xprevious;
    global.pit_y = yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Activate and Bubble over Oenns Head

Switch = instance_nearest(x,y,par_Switch);
CDW = instance_nearest(x,y,obj_Crystal_Detonate_Wall);

if ((distance_to_object(obj_Crystal_Detonate_Wall) &lt; 16)
and ((image_xscale = 2 and x &lt; CDW .x) or (image_xscale = -2 and x &gt; CDW .x)))

  // ADD MORE INTERACTABLE OBJECTS LATER
or ((distance_to_object(par_Switch) &lt; 16) and Switch.activated = 0)
and !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,false)
and place_meeting(x,y+1,par_Grounded)
and (bbox_bottom = Switch.bbox_bottom)
{
    can_activate = 1;
}
else
{
    can_activate = 0;
}

// Create Interact Bubble

if can_activate = 1 and !instance_exists(obj_Oenn_Interact_Bubble)
{
    instance_create(x,y-32,obj_Oenn_Interact_Bubble);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can SAVE and Bubble over Oenns Head

altar = instance_nearest(x,y,par_Save_Altar)

if (distance_to_object(par_Save_Altar) &lt; 16)
and !collision_line(x,y,obj_Oenn_Body.x,obj_Oenn_Body.y,par_wall,false,false)
and place_meeting(x,y+1,par_wall)
and state != states.enter
{
    can_save += .01;
}
else
{
    can_save = 0;
}

// Create Interact Bubble

if can_save &gt; 1 and !instance_exists(obj_Oenn_Interact_Bubble)
and state != states.saving 
and state != states.saving_done 
and state != states.enter
{
    instance_create(x,y-32,obj_Oenn_Interact_Bubble);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STAMINA Consumption and Regeneration

// Recovering if Idle (Never Exceeding Max)
if global.Oenn_stamina &lt; global. Oenn_staminaMAX
and (state = states.idle 
or state = states.walking 
or state = states.running 
or state = states.jumping 
or state = states.falling
or state = states.shooting_idle
or state = states.shooting_walking)
//and !Key_RTrig)
and stamina_recovery = 1
{
    global.Oenn_stamina += min(global.Oenn_staminaMAX-global.Oenn_stamina,(.70))
}

//BackUp
/*
if global.Oenn_stamina &lt; global. Oenn_staminaMAX
and (state = states.idle or state = states.walking 
or (state = states.jumping 
and !Key_RTrig))
and stamina_recovery = 1
{
    global.Oenn_stamina += min(global.Oenn_staminaMAX-global.Oenn_stamina,(.70))
}*/

// Exhaust

if global.Oenn_stamina &lt; 0
{
    global.Oenn_stamina = 0;
    stamina_recovery = 0;
    alarm[4] = 4*room_speed;
    audio_stop_sound(snd_Oenn_Shield); // stop charging sound
}

// Running

if state = states.running
{
    global.Oenn_stamina -= .5; //.12
}

if global.Oenn_stamina &lt;= 0
{
    can_run = 0;
}

if global.Oenn_stamina &gt; 15
{
    can_run = 1;
}



// Running Jumping

//if (state = states.jumping and Key_RTrig)
//{
//    global.Oenn_stamina -= .15;
//}

// Running Shooting

if state = states.shooting_running
{
    global.Oenn_stamina -= .10;
}



// Blocking

if state = states.blocking
{
    global.Oenn_stamina -= .5;   //.2
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Camera
if !instance_exists(obj_Camera)
{
    instance_create(x,y,obj_Camera);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global Shaking Constant

if global.shaking = 1
{
    global.shake = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivating Instances

// Leaves

if !instance_exists(obj_pause)
{
instance_deactivate_object(par_Leaves);

instance_activate_region(view_xview[0]-256, view_yview[0]-256, view_wview[0]+256,view_hview[0]+256,true);
}

/*
    if distance_to_object(obj_Oenn_Body) &lt; 300
    {
        instance_deactivate_object(obj_Leaves_Green);
    }
    else
    {
        instance_activate_object(obj_Leaves_Green);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cut Scene Movement

// Walking

if cs_walk = 1
{
    x += 3;
    image_speed = 1/4;
}

if cs_walk = -1
{
    x -= 3;
    image_speed = 1/4;
}

// Running

if cs_run = 1
{
    x += 5;
    image_speed = 1/2;
}

if cs_run = -1
{
    x -= 5;
    image_speed = 1/2;
}

// Jumping

if cs_jump = 1
{
    y -= 3.5;
}

if cs_jump = -1
{
    y += 6;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text Box Lock and Counter and Speed

if lock = 1
{
    can_move = 0;
}
if lock = 0
{
    can_move = 1;
}
/*
if lock = 1
{
    state = states.talking;
}*/

if lock = 0
{
    global.textnextcounter = 0;
}

Key_Up   =   gamepad_button_check(global.cp,gp_padu) or keyboard_check(vk_up);

if Key_Up
{
    text_update()
    global.textspeed = 5;
}
else
{
    global.textspeed = 2;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global HIT FREEZE

room_speed = global.hitfreeze;

if room != room_IntroStage_3
{
    if global.hitfreeze &lt; 45
    {
        global.hitfreeze += 10;
    }
    
    if global.hitfreeze &gt; 45
    {
        global.hitfreeze = 45;
    }
}
else
if global.hitfreeze &lt; 45
{
    global.hitfreeze += 1;
}

if global.hitfreeze &gt; 45
{
    global.hitfreeze = 45;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fighting Stance

if fightingstance &gt; 0
{
    fightingstancesprite = 1;
    fightingstance -= 1;
}
else
{
    fightingstancesprite = 0;
}

if instance_exists(par_Slash) 
or instance_exists(par_Pulse)
{
    fightingstance = 160;
}

// Reset Fighting Stance

if sprite_index = spr_Oenn_Walking
{
    fightingstancesprite = 0;
}
    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arm Out Shooting

if lock = 0
{
    if Key_Shot 
    {
        arm_out = 25;
    }
}

if lock = 1 
{
    arm_out = 0;
}

if Key_LBump // Stop if aimed
{
    arm_out = 0;
}



if arm_out &gt; 0
{
    arm_out -= .5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Charging Sound
/*
if state != states.charging
and state != states.charging2

{
    //audio_stop_sound(snd_Charging);
    audio_stop_sound(snd_Oenn_Shield);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Evironmental Hazard Damage and Knockback

hazard = instance_nearest(x,y,par_Hazard);

if distance_to_object(par_Hazard) &lt;= 1
and state != states.dashingleft
and state != states.dashingright
and cbd = 0
{
    audio_play_sound(snd_Oenn_Damaged,10,0); //SFX
    global.Oenn_hp -= hazard.enemy_dmg/global.shield;
    flash_timer = flash_duration;
    cbd = 1;
    image_alpha = .25;
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Attack_Collision, 10);
    global.shake = 20;
    alarm[1] = 2*room_speed;
    obj_Oenn_Legs.image_index = 0;
    state = states.damaged;
    
    if hazard.x &gt; x
    {
        hsp = -5;
    }
    
    if hazard.x &lt; x
    {
        hsp = 5;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SAVING

if sprite_index = spr_Oenn_Saving
or sprite_index = spr_Oenn_Saving_Done
{
    cbd = 1;
}

if place_meeting(x,y,par_Save_Altar) and state = states.saving and image_index = 17 
{
    global.pit_x = x;
    global.pit_y = y;
    instance_create(view_xview+view_wview/2,view_yview+view_hview/2,obj_Save_Menu);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Falling Landing State 

if state != states.falling
{
    fallstopamount = 0;
}

if fallstopamount &gt;= 31
and state != states.idle
{
if ((place_meeting(x,y+3,par_wall)) or (place_meeting(x,y+3,par_Platform)) 
or (place_meeting(x,y+3,obj_Crystal_Wall)))  //able to jump
{
    audio_play_sound(snd_Block_Landing,10,0);
    fallstopamount = 0;
    obj_Oenn_Legs.image_index = 0;
    state = states.fallingstop;
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy Floor Same 

thefloor = collision_point(x,y+24,par_Grounded,0,1);
//thefloor = instance_nearest(x,y,par_Grounded);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Flower Platform Cutscene

if place_meeting(x,y+1,obj_LucidFlowerPlatform)
and global.LucidCrystals &gt; global.LucidFlowers 
and x &lt; 930 and global.cut_scene = 0
and global.LucidFlowers &lt; 7
{
    timeline_index = tl_LucidFlowerBlooms;
    timeline_position = obj_Affliction_Tree.LFBTLJ;
    timeline_running = true;
    timeline_loop = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Env_Leaves">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leaves
//*
if leaves = 1
{
    part_particles_create(global.particle_system_front, x, y+48, global.pt_LeavesR, 10);
    audio_play_sound(snd_Leaves,10,0);
    leaves = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Platform

if y &lt; other.y
{
    y -= 1;
}

if y &gt; other.y
{
    y += 1;
}


// y += 1 can make a cool stuck in mud effect

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Particles and Emitters Now in HUD ALARM 3
/*
// Particle System Front
part_system_clear(global.particle_system_front);

part_emitter_destroy_all(global.particle_system_front);

part_system_depth(global.particle_system,-100000000);


// Particle System Mid
part_system_clear(global.particle_system);

part_emitter_destroy_all(global.particle_system);

part_system_depth(global.particle_system,-900);


// Particle System Below
part_system_clear(global.particle_system_back);

part_emitter_destroy_all(global.particle_system_back);

part_system_depth(global.particle_system_back,900);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Door and Oenn State

if state != states.leavingroom
{
    doorx = other.door_x;
    
    doory = other.door_y;
    
    roomto = other.my_room;
    
    doorgoleft = other.left;
    
    doorgoright = other.right;
    
    cbd = 1;
    
    lock = true
    
    if !instance_exists(obj_room_fade)
    {
        instance_create(x,y,obj_room_fade);
    
        obj_HUD.alarm[3] = room_speed*1;
    }
    can_move = 0;
    state = states.leavingroom;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Lucid Time

global.slowmo = 1;

/*
if instance_exists(obj_controller_ripple)
{
    with obj_controller_ripple
    {
        shader_reset();
        surface_free(surf);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop SFX

//audio_group_stop_all(audiogroup_default);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Enemy_Projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Knock Back
if cbd = 0
{
    if other.x &gt; x
    {
        hsp = -other.knockback;
    }
    
    if other.x &lt; x
    {
        hsp = other.knockback;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Damaged

if cbd = 0 and other.can_damage = 1
{
    audio_play_sound(snd_Oenn_Damaged,10,0); //SFX
    global.Oenn_hp -= other.enemy_dmg/global.shield;
    flash_timer = flash_duration;
    cbd = 1;
    image_alpha = .25;
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Attack_Collision, 10);
    global.shake = 20;
    alarm[1] = 1*room_speed;
    obj_Oenn_Legs.image_index = 0;
    /*
    // Knock Back
    if other.x &gt; x
    {
        hsp = -4;
    }
    
    if other.x &lt; x
    {
        hsp = 4;
    }
    */
    state = states.damaged;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Platform


y = y-lengthdir_y(-1,90)

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Knock Back
if cbd = 0 and other.enemy_state != enemy_states.enemy_damaged 
and other.enemy_state != enemy_states.enemy_death 
{
    if other.x &gt; x
    {
        hsp = -other.knockback;
    }
    
    if other.x &lt; x
    {
        hsp = other.knockback;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Damaged

if cbd = 0 
and other.enemy_state != enemy_states.enemy_death
and other.enemy_state != enemy_states.enemy_spawn
and other.enemy_state != enemy_states.enemy_damaged
and other.enemy_state != enemy_states.enemy_stunned
{
    audio_play_sound(snd_Oenn_Damaged,10,0); //SFX
    global.Oenn_hp -= other.enemy_dmg/global.shield;
    flash_timer = flash_duration;
    cbd = 1;
    image_alpha = .25;
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Attack_Collision, 10);
    global.shake = 20;
    alarm[1] = 2*room_speed;
    obj_Oenn_Legs.image_index = 0;
    state = states.damaged;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Enemy_Shield">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Damaged

if cbd = 0 //and other.enemy_state != enemy_states.enemy_death
and other.on = 1
{
    audio_play_sound(snd_Oenn_Damaged,10,0); //SFX
    global.Oenn_hp -= other.enemy_dmg/global.shield;
    flash_timer = flash_duration;
    cbd = 1;
    image_alpha = 0;
    part_particles_create(global.particle_system, x, y, global.pt_Oenn_Attack_Collision, 10);
    global.shake = 20;
    alarm[1] = 2*room_speed;
    obj_Oenn_Legs.image_index = 0;
    state = states.damaged;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get out of Wall
if !grounded
{
    if x &lt; other.x
    {
        x -= 1;
    }
    
    if x &gt; other.x
    {
        x += 1;
    }
}

// y += 1 can make a cool stuck in mud effect

/*
var_dir = point_direction(x,y,other.x,other.y)
x = x+lengthdir_x(-1,var_dir)
y = y+lengthdir_y(-1,var_dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recover from being Damaged
if global.cut_scene = 0
{
    if sprite_index = spr_Oenn_Damaged
    {
        state = states.idle;
        instance_activate_object(par_Hazard);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Charged

if sprite_index = spr_Oenn_Charged
{
    state = states.idle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Touching

if sprite_index = spr_Oenn_Touching
{
    state = states.idle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Saving

if sprite_index = spr_Oenn_Saving
{
    state = states.saving_done;
}

if sprite_index = spr_Oenn_Saving_Done and !instance_exists(obj_Save_Bar)
{
    state = states.idle;
    cbd = 0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slash Walking and Running to Running
/*
if sprite_index = spr_Oenn_Running_Slash
{
    state = states.running;
}
if sprite_index = spr_Oenn_Walking_Slash
{
    state = states.walking;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ENTER TO IDLE

if sprite_index = spr_Oenn_ENTER2
and (room = room_IntroStage_1 or room = room_Tutorial_1)
{
    image_index = 0;
    fightingstancesprite = 1
    fightingstance = 160;
    cbd = 0;
    state = states.idle;
    // Can Dash Again
    can_dashL = 1;
    can_dashR = 1;
    enterimagespeed = 0;
}

if sprite_index = spr_Oenn_ENTER2
and room != room_IntroStage_1 and room != room_Tutorial_1
{
    fightingstancesprite = 0
    cbd = 0;
    state = states.idle;
    // Can Dash Again
    can_dashL = 1;
    can_dashR = 1;
    enterimagespeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Standing Up to Idle

// INTROs
if room = room_IntroStage_00 or room = room_Affliction_1
{
    if sprite_index = spr_Oenn_StandingUp
    {
        state = states.idle;
        //can_move = 1;
        //lock = 0;
    }
}


if room = room_IntroStage_3
{
    if sprite_index = spr_Oenn_StandingUp
    {
        sprite_index = spr_Oenn_Idle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slashes back to idle

if sprite_index = spr_Oenn_Idle_Slash
or sprite_index = spr_Oenn_SlashCombo_1
or sprite_index = spr_Oenn_SlashCombo_2
or sprite_index = spr_Oenn_Crouch_Slash
or sprite_index = spr_Oenn_Idle_SlashUp
{
    
////////////////////////////////////////////////// DASHING

if Key_RTrig
and !Key_LBump
{
    state = states.dashready;
}
else
{   
    state = states.idle;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle Too Long Animation Counter

if sprite_index = spr_Oenn_Idle
and lock = 0
{
    idle_toolong += 1;
}


if sprite_index = spr_Oenn_Idle_AdjustJacket
or sprite_index = spr_Oenn_Idle_Handglow
{
    idle_toolong = 0;
}

if sprite_index = spr_Oenn_Idle_AdjustJacket
{
    idle_choose = 2;
}

if sprite_index = spr_Oenn_Idle_Handglow
{
    idle_choose = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dashing to Idle

if sprite_index = spr_Oenn_Dashing
{
    if !Key_RTrig
    {
        state = states.idle;
    }
    if Key_RTrig
    {
        state = states.dashready;
    }
    obj_Oenn_Legs.alarm[3] = room_speed * .15; // Can Dash Again Variables
    cbd = 0;
    //alarm[1] = room_speed *.1; // Can Be Damaged Alarm
    can_flip = 1;
    instance_activate_object(par_Hazard);
}

if sprite_index = spr_Oenn_Dashing_Back
{
    if !Key_RTrig
    {
        state = states.idle;
    }
    if Key_RTrig
    {
        state = states.dashready;
    }
    obj_Oenn_Legs.alarm[3] = room_speed * .15; // Can Dash Again Variables
    cbd = 0;
    //alarm[1] = room_speed *.1; // Can Be Damaged Alarm
    can_flip = 1;  
    instance_activate_object(par_Hazard);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling Transition 

if sprite_index = spr_Oenn_JumptoFall
{
    sprite_index = spr_Oenn_Falling;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DASH AGAIN after OTHER ANIMATIONS 

if sprite_index = spr_Oenn_SlashCombo_1
or sprite_index = spr_Oenn_SlashCombo_2
{
    can_dashL = 1;
    can_dashR = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation Reset

obj_Oenn_Legs.image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre Jump

if sprite_index = spr_Oenn_PreJump
{
    sprite_index = spr_Oenn_Jump;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Running or Falling to stop idle 

if sprite_index = spr_Oenn_RunningStop or sprite_index = spr_Oenn_Landing
{
    runstopamount = 0;
    fallstopamount = 0;
    sprite_index = spr_Oenn_Idle;
    state = states.idle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stam Charge
if global.cut_scene = 0
{
    if sprite_index = spr_Oenn_StamCharged
    {
        cbd = 0;
        state = states.idle;
        global.stamcharge = 0;
        part_emitter_destroy(global.particle_system,Stam_Charge_Aura);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blocking End and Blocking Break to Idle

if sprite_index = spr_Oenn_BlockingEnd
{
    sprite_index = spr_Oenn_FightingStance;
    fightingstancesprite = 1;
    fightingstance = 160;
    state = states.idle;
    //obj_Oenn_Legs.alarm[3] = room_speed * .40; // Can Dash Again Variables
    //alarm[1] = room_speed *.2; // Can Be Damaged Alarm
}



if sprite_index = spr_Oenn_BlockingBreak
{
    sprite_index = spr_Oenn_FightingStance;
    fightingstancesprite = 1;
    fightingstance = 160;
    state = states.idle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Charged Shot to Idle

if sprite_index = spr_Oenn_ChargeShot
or sprite_index = spr_Oenn_ChargeShot_Up
or sprite_index = spr_Oenn_ChargeShot_UpDiag
or sprite_index = spr_Oenn_ChargeShot_DownDiag
{
    fightingstance = 160;
    fightingstancesprite = 1;
    state = states.idle;
    global.slowmo = 1;
    with par_Enemy //and global.freeze_all = 0 
    {
        image_index = floor(image_index);
    }
    cbd = 0;
    can_shoot = 0;
    alarm[0] = room_speed * .40;
    grav = .4;
}

if sprite_index = spr_Oenn_ChargeShot_Jump
or sprite_index = spr_Oenn_ChargeShot_Jump_Up
or sprite_index = spr_Oenn_ChargeShot_Jump_Down
or sprite_index = spr_Oenn_ChargeShot_Jump_UpDiag
or sprite_index = spr_Oenn_ChargeShot_Jump_DownDiag
{
    if !grounded
    {
        sprite_index = spr_Oenn_Falling;
        state = states.falling;
    }
    if grounded
    {
        sprite_index = spr_Oenn_FightingStance;
        state = states.idle;
    }
    
    global.slowmo = 1;
    with par_Enemy //and global.freeze_all = 0 
    {
        image_index = floor(image_index);
    }
    cbd = 0;
    can_shoot = 0;
    alarm[0] = room_speed * .40;
    fightingstance = 160;
    grav = .4;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Back to Platform

if outside = 0
and global.cut_scene = 0
{
    x = global.pit_x;
    
    y = global.pit_y;
    
    global.Oenn_hp -= 4;
    
    cbd = 1;  // can be damaged
    
    image_alpha = 0;
    
    pitfall = 1;
    
    audio_play_sound(snd_Down_Pit,10,0);
    
    obj_Oenn_Legs.alarm[0] = 2*room_speed; // Camaera Locks back to Oenn
    
    alarm[1] = 2*room_speed;  // cbd //4
    
    state = states.pitspawn;
    
    alarm[5] = 2.5*room_speed;  // Pit State
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash White When Hit

if flash_timer &gt; 0
{
    shader_set(sh_flash);
    shader_set_uniform_f(flash, flash_r, flash_g, flash_b, flash_timer / flash_duration);
    draw_self();
    shader_reset();
    flash_timer--;
}
else draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bounding Box
/*
draw_set_colour(c_red);
draw_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_top,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// White Screen
/*
if image_alpha = 0
{
    draw_set_colour(c_white);
    draw_rectangle(0,0,room_width,room_height,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Draws

// draw_text(x,y-64,fallstopamount);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="89">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Wall

if global.CrystalHold = 1
{
    global.CrystalWall += 1;
    global.CrystalHold -= 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Armor

if global.CrystalOrb = 1
{
    global.CrystalOrb -= 1;
    global.CrystalArmor += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Hold

if global.CrystalWall = 1
{
    global.CrystalWall -= 1;
    global.CrystalHold += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Teleport

if global.LucidTime = 1
{
    global.LucidTime -= 1;
    global.LucidTeleport += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lucid Time

if global.LucidTeleport = 1
{
    global.LucidTeleport -= 1;
    global.LucidTime += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Normal Speed

global.slowmo = 1;

room_speed = 45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slow MO

global.slowmo = 2;

room_speed = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crystal Orb

if global.CrystalArmor = 1
{
    global.CrystalArmor -= 1;
    global.CrystalOrb += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TOGGLE FULL SCREEN : TO BE MOVED TO CONTROLLER OBJECT

window_set_fullscreen(!window_get_fullscreen()); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Particles

   //////////////////////////////////////////////// Clear Particles and Emitters

    // Particle System Front
    part_system_clear(global.particle_system_front);
    
    part_emitter_destroy_all(global.particle_system_front);
    
    part_system_depth(global.particle_system,-100000000);
    
    
    // Particle System Mid
    part_system_clear(global.particle_system);
    
    part_emitter_destroy_all(global.particle_system);
    
    part_system_depth(global.particle_system,-900);
    
    
    // Particle System Below
    part_system_clear(global.particle_system_back);
    
    part_emitter_destroy_all(global.particle_system_back);
    
    part_system_depth(global.particle_system_back,900);
    
    // Particle System Background
    part_system_clear(global.particle_system_background);
    
    part_emitter_destroy_all(global.particle_system_background);
    
    part_system_depth(global.particle_system_background,1000200);
    
    // Particle System Background 10000001
    part_system_clear(global.particle_system_background_10000001);
    
    part_emitter_destroy_all(global.particle_system_background_10000001);
    
    part_system_depth(global.particle_system_background_10000001,10000001);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Music

audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
